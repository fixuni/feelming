{"ast":null,"code":"import { all, fork, takeLatest, throttle, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(2000);\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer 의 데이터 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer 의 데이터 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  //console.log('in loadMainPosts Saga ');\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  //console.log('in loadMainPosts Saga ');\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  //yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  //yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n  yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"addComment() in sagas : \", action);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"addComment() in sagas result : \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  console.log('loadCommentsAPI()  postId : ', postId);\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  console.log('loadComment action : ', action);\n\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    console.log('loadComments() result.data : ', result.data);\n    console.log('loadComments() action.data : ', action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    //console.log('loadComments FAILURE : ', e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data); // 자신의 글은 리트윗할 수 없습니다.\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/app/frontend/sagas/post.js"],"names":["all","fork","takeLatest","throttle","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","console","log","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchloadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, throttle, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n } from '../reducers/post';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nimport axios from 'axios';\n\n\n\n\nfunction addPostAPI(postData) {\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        \n        const result = yield call(addPostAPI, action.data);\n        yield put({                 // post reducer 의 데이터 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put ( {               // user reducer 의 데이터 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n    //console.log('in loadMainPosts Saga ');\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n    //console.log('in loadMainPosts Saga ');\n    try{\n        const result = yield call(loadMainPostsAPI, action.lastId);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    //yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    //yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n    yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    console.log('loadCommentsAPI()  postId : ', postId);\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    console.log('loadComment action : ', action)\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        console.log('loadComments() result.data : ', result.data);\n        console.log('loadComments() action.data : ', action.data);\n\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        //console.log('loadComments FAILURE : ', e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\n\nfunction uploadImagesAPI(formData) {\n    return axios.post( `/post/images`, formData)\n}\n\nfunction* uploadImages(action) {\n    try{\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n    return axios.post( `/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action) {\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n    return axios.delete( `/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action) {\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n    return axios.post( `/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action) {\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n        alert(e.response && e.response.data);     // 자신의 글은 리트윗할 수 없습니다.\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n    return axios.delete( `/post/${postId}`, {\n        withCredentials: true,\n    });\n}\n\nfunction* removePost(action) {\n    try{\n        const result = yield call(removePostAPI, action.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        })\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n        fork(watchRemovePost),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}