{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport axios from 'axios';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(2000);\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer 의 데이터 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer 의 데이터 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  //console.log('in loadMainPosts Saga ');\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  //console.log('in loadMainPosts Saga ');\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${encodeURIComponet(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"addComment() in sagas : \", action);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"addComment() in sagas result : \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  console.log('loadCommentsAPI()  postId : ', postId);\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  console.log('loadComment action : ', action);\n\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    console.log('loadComments() result.data : ', result.data);\n    console.log('loadComments() action.data : ', action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    //console.log('loadComments FAILURE : ', e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data); // 자신의 글은 리트윗할 수 없습니다.\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["/app/frontend/sagas/post.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","axios","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponet","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","console","log","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchloadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n } from '../reducers/post';\nimport axios from 'axios';\n\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\n\nfunction addPostAPI(postData) {\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        \n        const result = yield call(addPostAPI, action.data);\n        yield put({                 // post reducer 의 데이터 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put ( {               // user reducer 의 데이터 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n    //console.log('in loadMainPosts Saga ');\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n    //console.log('in loadMainPosts Saga ');\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n    return axios.get(`/hashtag/${encodeURIComponet(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    console.log('loadCommentsAPI()  postId : ', postId);\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    console.log('loadComment action : ', action)\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        console.log('loadComments() result.data : ', result.data);\n        console.log('loadComments() action.data : ', action.data);\n\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        //console.log('loadComments FAILURE : ', e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\n\nfunction uploadImagesAPI(formData) {\n    return axios.post( `/post/images`, formData)\n}\n\nfunction* uploadImages(action) {\n    try{\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n    return axios.post( `/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action) {\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n    return axios.delete( `/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action) {\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n    return axios.post( `/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action) {\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n        alert(e.response && e.response.data);     // 자신의 글은 리트윗할 수 없습니다.\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}