{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, EDIT_NICKNAME_FAILURE, UPLOAD_PROFILE_IMAGES_REQUEST, UPLOAD_PROFILE_IMAGES_SUCCESS, UPLOAD_PROFILE_IMAGES_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction logInAPI(logInData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/login', logInData, {\n    withCredentials: true //  쿠키 교환 with backend \n    // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해준다\n    // SSR 일 때는 브라우저가 빠져 있으니 직접 쿠키를 넣어준다.\n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    // yield call(loginAPI);       // call 동기 호출\n    //yield delay( 2000);\n    console.log(\"before logInAPI() in Saga\");\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      reason: e.response && e.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); // while(true){\n  //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n  //     yield put( {            // put 은 redux 에 dispatch 와 동일\n  //         type: LOG_IN_SUCCESS,\n  //     });\n  // }\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    //yield call(signUpAPI);       // call 동기 호출\n    //yield delay(2000);\n    const result = yield call(signUpAPI, action.data); //throw new Error('에러 발생');\n\n    console.log(\"result : \", result);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut(action) {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(id, offset = 0, limit = 3) {\n  return axios.get(`/user/${id || 0}/followers?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data, action.offset);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId, offset = 0, limit = 3) {\n  return axios.get(`/user/${userId || 0}/followings?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data, action.offset);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  return axios.delete(`/user/${userId || 0}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 부분만 수정시 patch()\n  return axios.patch(`/user/nickname`, {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nfunction uploadProfileImageAPI(formData) {\n  return axios.put(`/user/profileImg`, formData);\n}\n\nfunction* uploadProfileImage(action) {\n  try {\n    const result = yield call(uploadProfileImageAPI, action.data);\n    yield put({\n      type: UPLOAD_PROFILE_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_PROFILE_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadProfileImage() {\n  yield takeLatest(UPLOAD_PROFILE_IMAGES_REQUEST, uploadProfileImage);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchSignUp), fork(watchLogOut), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowings), fork(watchLoadFollowers), fork(watchRemoveFollower), fork(watchEditNickname), fork(watchUploadProfileImage) // call()   // 동기 호출\n  // fork()   // 비동기 호출\n  // watchHello(),\n  // //helloSaga(),\n  // watchLogin(),\n  // watchSignup(),\n  ]);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\nfunction* helloSaga() {\n  //yield take(HELLO_SAGA);\n  //yield takeLatest(HELLO_SAGA, hello);\n  console.log(\"Before Saga\");\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}