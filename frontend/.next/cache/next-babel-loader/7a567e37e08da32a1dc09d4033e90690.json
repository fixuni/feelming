{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchloadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removePost),\n    _marked22 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadSinglePost),\n    _marked24 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadSinglePost),\n    _marked25 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, throttle, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // post reducer 의 데이터 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            // user reducer 의 데이터 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  //console.log('in loadMainPosts Saga ');\n  return axios.get(\"/posts?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag), \"?lastId=\").concat(lastId, \"&limit=10\"));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          console.log(\"addComment() in sagas : \", action);\n          _context9.next = 4;\n          return call(addCommentAPI, action.data);\n\n        case 4:\n          result = _context9.sent;\n          console.log(\"addComment() in sagas result : \", result);\n          _context9.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 8:\n          _context9.next = 14;\n          break;\n\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  console.log('loadCommentsAPI()  postId : ', postId);\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          console.log('loadComment action : ', action);\n          _context11.prev = 1;\n          _context11.next = 4;\n          return call(loadCommentsAPI, action.data);\n\n        case 4:\n          result = _context11.sent;\n          console.log('loadComments() result.data : ', result.data);\n          console.log('loadComments() action.data : ', action.data);\n          _context11.next = 9;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 9:\n          _context11.next = 15;\n          break;\n\n        case 11:\n          _context11.prev = 11;\n          _context11.t0 = _context11[\"catch\"](1);\n          _context11.next = 15;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[1, 11]]);\n}\n\nfunction watchloadComments() {\n  return _regeneratorRuntime.wrap(function watchloadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 12;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && _context19.t0.response.data); // 자신의 글은 리트윗할 수 없습니다.\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction removePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId), {\n    withCredentials: true\n  });\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context21.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context21.next = 15;\n          break;\n\n        case 10:\n          _context21.prev = 10;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n          _context21.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context21.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction loadSinglePostAPI(postId) {\n  console.log(\" loadSinglePostAPI postId : \", postId);\n  return axios.get(\"/post/\".concat(postId));\n}\n\nfunction loadSinglePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSinglePost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.prev = 0;\n          _context23.next = 3;\n          return call(loadSinglePostAPI, action.data);\n\n        case 3:\n          result = _context23.sent;\n          console.log(\"saga result : \", result.data);\n          _context23.next = 7;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context23.next = 13;\n          break;\n\n        case 9:\n          _context23.prev = 9;\n          _context23.t0 = _context23[\"catch\"](0);\n          _context23.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context23.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23, null, [[0, 9]]);\n}\n\nfunction watchLoadSinglePost() {\n  return _regeneratorRuntime.wrap(function watchLoadSinglePost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadSinglePost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n          fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadSinglePost)]);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["/app/frontend/sagas/post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","addComment","watchAddComment","loadComments","watchloadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","removePost","watchRemovePost","loadSinglePost","watchLoadSinglePost","postSaga","all","fork","takeLatest","throttle","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","id","error","loadMainPostsAPI","lastId","limit","get","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","addCommentAPI","console","log","postId","content","comment","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","retweetAPI","alert","response","removePostAPI","loadSinglePostAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, throttle, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n    LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE\n } from '../reducers/post';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nimport axios from 'axios';\n\n\n\n\nfunction addPostAPI(postData) {\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        \n        const result = yield call(addPostAPI, action.data);\n        yield put({                 // post reducer 의 데이터 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put ( {               // user reducer 의 데이터 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n    //console.log('in loadMainPosts Saga ');\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n    //console.log('in loadMainPosts Saga ');\n    try{\n        const result = yield call(loadMainPostsAPI, action.lastId);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    //yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    //yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n    yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    console.log('loadCommentsAPI()  postId : ', postId);\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    console.log('loadComment action : ', action)\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        console.log('loadComments() result.data : ', result.data);\n        console.log('loadComments() action.data : ', action.data);\n\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        //console.log('loadComments FAILURE : ', e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\n\nfunction uploadImagesAPI(formData) {\n    return axios.post( `/post/images`, formData)\n}\n\nfunction* uploadImages(action) {\n    try{\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n    return axios.post( `/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action) {\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n    return axios.delete( `/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action) {\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n    return axios.post( `/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action) {\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n        alert(e.response && e.response.data);     // 자신의 글은 리트윗할 수 없습니다.\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n    return axios.delete( `/post/${postId}`, {\n        withCredentials: true,\n    });\n}\n\nfunction* removePost(action) {\n    try{\n        const result = yield call(removePostAPI, action.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        })\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n\n\nfunction loadSinglePostAPI(postId) {\n    console.log(\" loadSinglePostAPI postId : \", postId);\n    return axios.get( `/post/${postId}`);\n}\n\nfunction* loadSinglePost(action) {\n    try{\n        const result = yield call(loadSinglePostAPI, action.data);\n        console.log(\"saga result : \", result.data)\n        yield put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n       // console.error(e);\n        yield put({\n            type: LOAD_POST_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadSinglePost() {\n    yield takeLatest(LOAD_POST_REQUEST, loadSinglePost);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n        fork(watchRemovePost),\n        fork(watchLoadSinglePost),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}