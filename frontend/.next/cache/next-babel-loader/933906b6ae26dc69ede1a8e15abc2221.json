{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/app/frontend/containers/PostCard.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect, useImperativeHandle } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport styled from 'styled-components';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  console.log(\"post hashtag : \", post.content);\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, [me && me.id, post && post.Followings]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      console.log(\"call onRemovePost() \");\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(CardWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(Card //key={+post.createdAt}\n  //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n  , {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \" \\uC218\\uC815 \"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"\\uC2E0\\uACE0\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, __jsx(Icon, {\n      type: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD588\\uC2B5\\uB2C8\\uB2E4\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id),\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \" \\uC090\\uC57D \")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/app/frontend/containers/PostCard.js"],"names":["React","useState","useCallback","useEffect","useImperativeHandle","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","PropTypes","useSelector","useDispatch","Link","PostImages","PostCardContent","styled","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","CardWrapper","div","PostCard","post","console","log","content","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","Followings","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","createdAt"],"mappings":"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","sourcesContent":["import React,{useState, useCallback, useEffect, useImperativeHandle } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from '../components/PostImages'\nimport PostCardContent from '../components/PostCardContent';\nimport styled from 'styled-components';\n\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, \n    REMOVE_POST_REQUEST } from '../reducers/post';\n\n\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n    console.log(\"post hashtag : \", post.content)\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const [commentText, setCommentText ] = useState('');\n    const { me } = useSelector( state => state.user);\n    const { commentAdded, isAddingComment } = useSelector( state => state.post);\n    const dispatch = useDispatch();\n\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n    const onToggleComment = useCallback( () => {\n        setCommentFormOpened( prev => !prev );\n        if (!commentFormOpened) {\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [ ]);\n\n    const onSubmitComment = useCallback( (e) => {\n        e.preventDefault();\n        if (!me){\n            return alert('로그인이 필요합니다')\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect( () => {\n        setCommentText('');\n    }, [ commentAdded === true ]);\n\n    const onChangeCommentText = useCallback( (e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    const onToggleLike = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        if (liked){     // 좋아요 누른 상태\n            dispatch( {\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            });\n        } else {                                                        // 좋아요 안 누른 상태\n            dispatch( {\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            });\n        }\n    }, [me && me.id, post && post.id, liked])\n\n    const onRetweet = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        });\n    }, [me && me.id, post && post.id]);\n\n    const onFollow = useCallback( userId => () => {\n        dispatch({\n            type: FOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, [me && me.id, post && post.Followings]);\n\n    const onUnfollow = useCallback( userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const onRemovePost = useCallback( userId => () => {\n        console.log(\"call onRemovePost() \")\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: userId,\n        });\n    },[]);\n\n\n    return (\n        <CardWrapper>\n        <Card\n            //key={+post.createdAt}\n            //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n            cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n                <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor={\"#eb2f96\"} onClick={onToggleLike} />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Popover\n                    key='ellipsis'\n                    content={(\n                        <Button.Group>\n                            {me && post.UserId === me.id\n                                ? (\n                                    <>\n                                        <Button> 수정 </Button>\n                                        <Button type=\"danger\" onClick={onRemovePost(post.id)} >삭제</Button>\n                                    </>\n                                )\n                            : <Button>신고</Button>}\n                        </Button.Group>\n                    )}\n                    >\n                        <Icon type=\"ellipsis\" />\n                    </Popover>\n            ]}\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗했습니다` : null}\n    \n            extra={!me || post.User.id === me.id\n                ? null\n                : me.Followings && me.Followings.find(v => v.id === post.User.id)\n                  ? <Button onClick={onUnfollow(post.User.id)} type='primary'>언팔로우</Button>\n                  : <Button onClick={onFollow(post.User.id)} >팔로우</Button>\n              }\n        >\n            {post.RetweetId && post.Retweet ?\n                (\n                <Card\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\n                >\n                <Card.Meta\n                    avatar={(\n                    <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                    </Link>\n                    )}\n                title={post.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n                />\n                </Card>\n                )\n            : (\n            <Card.Meta\n                avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n          )}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n\n            /> )}\n        </Card>\n        { commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment} >\n                    <Form.Item>\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}> 삐약 </Button>\n                </Form>\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </CardWrapper>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}