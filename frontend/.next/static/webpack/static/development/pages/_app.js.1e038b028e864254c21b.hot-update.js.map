{"version":3,"file":"static/webpack/static/development/pages/_app.js.1e038b028e864254c21b.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Head from 'next/head';\nimport Helmet from 'react-helmet';\nimport App, { Container } from 'next/app';\n\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { Provider } from 'react-redux';\nimport {createStore, compose, applyMiddleware } from 'redux';\nimport { initialState } from '../reducers/user';\nimport { composeWithDevTools } from 'remote-redux-devtools';\nimport axios from 'axios';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\n// class Feelming extends App {\n//     static getInitialProps(content) {\n//     }\n//     render() {\n//     }\n// }\n\nconst Feelming = ({ Component, store, pageProps }) => {\n    return (\n        <Container>\n        <Provider store={store} >\n            <Helmet\n                title=\"Feelming\"\n                htmlAttributes={{ lang: 'ko' }}\n                meta={[{\n                    charset: 'UTF-8',\n                }, {\n                    name: 'viewport', \n                    content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\n                }, {\n                    'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\n                }, {\n                    name: 'description', content: 'Feelming SNS',\n                }, {\n                    name: 'og:title', content: 'Feelming',\n                }, {\n                    name: 'og:description', content: 'Feelming SNS',\n                }, {\n                    property: 'og:type', content: 'website',\n                }]}\n                link={[{\n                    rel: 'shortcut icon', href: '/favicon.png',\n                    }, {\n                        rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\n                    }, {\n                        rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\n                    }, {\n                        rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\n                }]}\n            />\n            <AppLayout>\n                <Component {...pageProps} />\n            </AppLayout>\n        </Provider>\n        </Container>\n    );\n};\n\nFeelming.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n    store: PropTypes.object.isRequired,\n    pageProps: PropTypes.object.isRequired,\n};\n\nFeelming.getInitialProps = async (context) => {\n    //console.log(context);\n    const { ctx, Component } = context;\n    let pageProps = {};\n    const state = ctx.store.getState();\n\n    // 로그인 정보 호출하는 부분\n    const cookie = ctx.isServer ?  ctx.req.headers.cookies : '';\n    if (ctx.isServer && cookie) {\n        axios.defaults.headers.Cookie = cookie;\n    }\n    if (!state.user.me) {\n        ctx.store.dispatch( {\n            type: LOAD_USER_REQUEST,\n        })\n    }\n    // 메인 포스트 가져오는 부분\n    if (Component.getInitialProps) {\n        pageProps = await context.Component.getInitialProps(ctx) || {};\n    }\n    \n    return { pageProps };\n};\n\nconst configureStore = (initialState, options ) => {\n    const sagaMiddleware = createSagaMiddleware();\n    //const middlewares = [sagaMiddleware];\n    const middlewares = [sagaMiddleware, (store) => (next) => (action) => {\n        // saga log 파일 보기\n        //    console.log(action);\n        next(action);\n    }];\n    const enhancer = process.env.NODE_DEV === 'production'\n        ? compose( applyMiddleware(...middlewares))\n        : compose(\n          applyMiddleware(...middlewares),   // typeof window !== 'undefined'\n          !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\n        );\n\n    const store = createStore(reducer, initialState, enhancer);\n    //sagaMiddleware.run(rootSaga);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Feelming));\n\n // _document.js      html, head, body\n // _app.js           root\n // pages             실제 컴포넌트\n\n //  _error.js    \n\n\n\n /*\n// curring 기법,  인자를 넣어주고 결과로 함수를 받음\nconst middlewares = (store) => (next) => (action) => {\n    console.log(action);\n    next(action);\n}\n\nconst hoc = (mapStateToProps) => (Component) => () => {\n    console.log(\"I am hoc\");\n    return (\n        <Component props={mapStateToProps()} />\n    )\n}\n\n \n// 하이 오더 컴포넌트\nhoc(Component)\nconnect(mapStateToProps)(Component);\n*/"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAFA;AAIA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAkBA;AACA;AAnBA;AAAA;AAqBA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAKA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}