{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback } from 'react';\nimport PostCard from '../containers/PostCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\n\nconst Hashtag = ({\n  tag\n}) => {\n  // console.log(\"tag : \", tag);\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        dispatch({\n          type: LOAD_HASHTAG_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n          data: tag\n        });\n      }\n    }\n\n    ;\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n  return __jsx(\"div\", null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n\nHashtag.getInitialProps = async context => {\n  const tag = context.query.tag; //console.log('hashtag getInitialProps', context.query.tag);\n\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag\n  });\n  return {\n    tag\n  };\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["/app/frontend/pages/hashtag.js"],"names":["React","useEffect","useCallback","PostCard","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","Hashtag","tag","dispatch","mainPosts","hasMorePost","state","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","data","addEventListener","removeEventListener","map","c","getInitialProps","context","query","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAAQC,0BAAR,QAAyC,kBAAzC;;AAIA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC1B;AACC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAACM,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BN,WAAW,CAAEO,KAAK,IAAIA,KAAK,CAACC,IAAjB,CAA7C;AAEA,QAAMC,QAAQ,GAAGZ,WAAW,CAAE,MAAM;AAChC,QAAIa,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACEF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAD9C,EACoD;AAC5C,UAAIT,WAAJ,EAAiB;AACbF,QAAAA,QAAQ,CAAC;AACLY,UAAAA,IAAI,EAAEf,0BADD;AAELgB,UAAAA,MAAM,EAAEZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAT,IAAoCb,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAT,CAAiCC,EAFxE;AAGLC,UAAAA,IAAI,EAAEjB;AAHD,SAAD,CAAR;AAKH;AACJ;;AAAA;AACR,GAX2B,EAWzB,CAACG,WAAD,EAAcD,SAAS,CAACa,MAAxB,CAXyB,CAA5B;AAaAtB,EAAAA,SAAS,CAAE,MAAM;AACbc,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCZ,QAAlC;AACA,WAAO,MAAM;AAAG;AACZC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCb,QAArC;AACH,KAFD;AAGH,GALQ,EAKN,CAACJ,SAAS,CAACa,MAAX,CALM,CAAT,CAlByB,CAuBD;;AAExB,SACI,mBACKb,SAAS,CAACkB,GAAV,CAAcC,CAAC,IACZ,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACL,EAAjB;AAAqB,IAAA,IAAI,EAAEK;AAA3B,IADH,CADL,CADJ;AAOH,CAhCD;;AAsCAtB,OAAO,CAACuB,eAAR,GAA0B,MAAOC,OAAP,IAAmB;AACzC,QAAMvB,GAAG,GAAGuB,OAAO,CAACC,KAAR,CAAcxB,GAA1B,CADyC,CAEzC;;AACAuB,EAAAA,OAAO,CAACE,KAAR,CAAcxB,QAAd,CAAuB;AACnBY,IAAAA,IAAI,EAAEf,0BADa;AAEnBmB,IAAAA,IAAI,EAAEjB;AAFa,GAAvB;AAIA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CARD;;AAUA,eAAeD,OAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport PostCard from '../containers/PostCard'\nimport {useDispatch, useSelector } from 'react-redux';\nimport {LOAD_HASHTAG_POSTS_REQUEST} from '../reducers/post';\n\n\n \nconst Hashtag = ({ tag }) => {\n   // console.log(\"tag : \", tag);\n    const dispatch = useDispatch();\n    const {mainPosts, hasMorePost } = useSelector( state => state.post );\n\n    const onScroll = useCallback( () => {\n        if (window.scrollY + document.documentElement.clientHeight \n            > document.documentElement.scrollHeight - 300 ) {\n                if (hasMorePost) {\n                    dispatch({\n                        type: LOAD_HASHTAG_POSTS_REQUEST,\n                        lastId: mainPosts[mainPosts.length - 1 ] && mainPosts[mainPosts.length - 1 ].id,\n                        data: tag\n                    })\n                }\n            };\n    }, [hasMorePost, mainPosts.length]);\n\n    useEffect( () => {\n        window.addEventListener('scroll', onScroll);\n        return () => {  // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n            window.removeEventListener('scroll', onScroll);\n        }\n    }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n    return (\n        <div>\n            {mainPosts.map(c => (\n                <PostCard key={c.id} post={c} />\n            ))}\n        </div>\n    );\n};\n\nHashtag.propTypes = {\n    tag: PropTypes.string.isRequired,\n};\n\nHashtag.getInitialProps = async (context) => {\n    const tag = context.query.tag;\n    //console.log('hashtag getInitialProps', context.query.tag);\n    context.store.dispatch({\n        type: LOAD_HASHTAG_POSTS_REQUEST,\n        data: tag,\n    })\n    return { tag };\n}\n\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}