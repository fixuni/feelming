{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction logInAPI(logInData) {\n  console.log(\"called logInAPI() \"); // 서버에 요청 보내는 부분\n\n  return axios.post('/user/login', logInData, {\n    withCredentials: true //  쿠키 교환 with backend \n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    // yield call(loginAPI);       // call 동기 호출\n    //yield delay( 2000);\n    console.log(\"before logInAPI() in Saga\");\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); // while(true){\n  //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n  //     yield put( {            // put 은 redux 에 dispatch 와 동일\n  //         type: LOG_IN_SUCCESS,\n  //     });\n  // }\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    //yield call(signUpAPI);       // call 동기 호출\n    //yield delay(2000);\n    yield call(signUpAPI, action.data); //throw new Error('에러 발생');\n\n    yield put({\n      // put 은 dispatch 와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut(action) {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchSignUp), fork(watchLogOut), fork(watchLoadUser) // call()   // 동기 호출\n  // fork()   // 비동기 호출\n  // watchHello(),\n  // //helloSaga(),\n  // watchLogin(),\n  // watchSignup(),\n  ]);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\nfunction* helloSaga() {\n  //yield take(HELLO_SAGA);\n  //yield takeLatest(HELLO_SAGA, hello);\n  console.log(\"Before Saga\");\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","axios","logInAPI","logInData","console","log","post","withCredentials","logIn","action","result","data","type","e","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","userSaga","helloSaga","HELLO_SAGA","watchHello"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user'\nimport axios from 'axios';\n// const HELLO_SAGA = 'HELLO_SAGA';\n\n\nfunction logInAPI(logInData) {\n    console.log(\"called logInAPI() \")\n// 서버에 요청 보내는 부분\n    return axios.post('/user/login', logInData, {\n        withCredentials: true,      //  쿠키 교환 with backend \n    });\n}\n\nfunction* logIn(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        //yield delay( 2000);\n        console.log(\"before logInAPI() in Saga\")\n        const result = yield call(logInAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n    // while(true){\n    //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n    //     yield put( {            // put 은 redux 에 dispatch 와 동일\n    //         type: LOG_IN_SUCCESS,\n    //     });\n    // }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut(action) {\n    try {\n        yield call(logOutAPI);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n    \n    return axios.get( userId ? `/user/${userId}` : '/user/',  {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser(action) {\n    try {\n        const result = yield call(loadUserAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}