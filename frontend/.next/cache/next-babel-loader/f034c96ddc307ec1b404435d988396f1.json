{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, EDIT_NICKNAME_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction logInAPI(logInData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/login', logInData, {\n    withCredentials: true //  쿠키 교환 with backend \n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    // yield call(loginAPI);       // call 동기 호출\n    //yield delay( 2000);\n    console.log(\"before logInAPI() in Saga\");\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); // while(true){\n  //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n  //     yield put( {            // put 은 redux 에 dispatch 와 동일\n  //         type: LOG_IN_SUCCESS,\n  //     });\n  // }\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    //yield call(signUpAPI);       // call 동기 호출\n    //yield delay(2000);\n    const result = yield call(signUpAPI, action.data); //throw new Error('에러 발생');\n\n    console.log(\"result : \", result);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut(action) {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n  return axios.get(`/user/${userId}/followers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n  return axios.get(`/user/${userId}/followings`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 부분만 수정시 patch()\n  return axios.patch(`/user/nickname`, {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchSignUp), fork(watchLogOut), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowings), fork(watchLoadFollowers), fork(watchRemoveFollower), fork(watchEditNickname) // call()   // 동기 호출\n  // fork()   // 비동기 호출\n  // watchHello(),\n  // //helloSaga(),\n  // watchLogin(),\n  // watchSignup(),\n  ]);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\nfunction* helloSaga() {\n  //yield take(HELLO_SAGA);\n  //yield takeLatest(HELLO_SAGA, hello);\n  console.log(\"Before Saga\");\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}","map":{"version":3,"sources":["/app/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","axios","logInAPI","logInData","post","withCredentials","logIn","action","console","log","result","data","type","e","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","removeFollowerAPI","removeFollower","watchRemoveFollower","editNicknameAPI","nickname","patch","editNickname","watchEditNickname","userSaga","helloSaga","HELLO_SAGA","watchHello"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\n    FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE,\n    UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE,\n    LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE,\n    LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE,\n    REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE,\n    EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, EDIT_NICKNAME_FAILURE,\n} from '../reducers/user'\nimport axios from 'axios';\n// const HELLO_SAGA = 'HELLO_SAGA';\n\n\nfunction logInAPI(logInData) {\n// 서버에 요청 보내는 부분\n    return axios.post('/user/login', logInData, {\n        withCredentials: true,      //  쿠키 교환 with backend \n    });\n}\n\nfunction* logIn(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        //yield delay( 2000);\n        console.log(\"before logInAPI() in Saga\")\n        const result = yield call(logInAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n    // while(true){\n    //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n    //     yield put( {            // put 은 redux 에 dispatch 와 동일\n    //         type: LOG_IN_SUCCESS,\n    //     });\n    // }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        const result = yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n        console.log(\"result : \", result);\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut(action) {\n    try {\n        yield call(logOutAPI);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n    \n    return axios.get( userId ? `/user/${userId}` : '/user/',  {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser(action) {\n    try {\n        const result = yield call(loadUserAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n    \n    return axios.post( `/user/${userId}/follow`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* follow(action) {\n    try {\n        const result = yield call(followAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: FOLLOW_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: FOLLOW_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchFollow() {\n    yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n    \n    return axios.delete( `/user/${userId}/follow`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unfollow(action) {\n    try {\n        const result = yield call(unfollowAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: UNFOLLOW_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: UNFOLLOW_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchUnfollow() {\n    yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n    \n    return axios.get( `/user/${userId}/followers`, {\n        withCredentials: true,\n    });\n}\n\nfunction* loadFollowers(action) {\n    try {\n        const result = yield call(loadFollowersAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_FOLLOWERS_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_FOLLOWERS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadFollowers() {\n    yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n    \n    return axios.get( `/user/${userId}/followings`, {\n        withCredentials: true,\n    });\n}\n\nfunction* loadFollowings(action) {\n    try {\n        const result = yield call(loadFollowingsAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_FOLLOWINGS_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_FOLLOWINGS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadFollowings() {\n    yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n    \n    return axios.delete( `/user/${userId}/follower`, {\n        withCredentials: true,\n    });\n}\n\nfunction* removeFollower(action) {\n    try {\n        const result = yield call(removeFollowerAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: REMOVE_FOLLOWER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: REMOVE_FOLLOWER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchRemoveFollower() {\n    yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n    // 부분만 수정시 patch()\n    return axios.patch( `/user/nickname`, {nickname}, {\n        withCredentials: true,\n    });\n}\n\nfunction* editNickname(action) {\n    try {\n        const result = yield call(editNicknameAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: EDIT_NICKNAME_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: EDIT_NICKNAME_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEditNickname() {\n    yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchFollow),\n        fork(watchUnfollow),\n        fork(watchLoadFollowings),\n        fork(watchLoadFollowers),\n        fork(watchRemoveFollower),\n        fork(watchEditNickname),\n\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}