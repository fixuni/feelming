{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logIn),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogIn),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogOut),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHello);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // const HELLO_SAGA = 'HELLO_SAGA';\n\nfunction logInAPI(logInData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/login', logInData, {\n    withCredentials: true //  쿠키 교환 with backend \n\n  });\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction logOut(action) {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            // put 은 dispatch 와 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserAPI() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put 은 dispatch 와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogIn), // 이벤트 리스너로 이해, 순서 의미 없음\n          fork(watchSignUp), fork(watchLogOut), fork(watchLoadUser) // call()   // 동기 호출\n          // fork()   // 비동기 호출\n          // watchHello(),\n          // //helloSaga(),\n          // watchLogin(),\n          // watchSignup(),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          //yield take(HELLO_SAGA);\n          //yield takeLatest(HELLO_SAGA, hello);\n          console.log(\"Before Saga\");\n\n        case 1:\n          if (!true) {\n            _context10.next = 7;\n            break;\n          }\n\n          _context10.next = 4;\n          return take(HELLO_SAGA);\n\n        case 4:\n          console.log(\"Hello Saga\");\n          _context10.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(HELLO_SAGA,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return delay(1000);\n\n                  case 2:\n                    _context11.next = 4;\n                    return put({\n                      type: 'BYE_SAGA'\n                    });\n\n                  case 4:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/user.js"],"names":["logIn","watchLogIn","signUp","watchSignUp","logOut","watchLogOut","loadUser","watchLoadUser","userSaga","helloSaga","watchHello","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","axios","logInAPI","logInData","post","withCredentials","action","data","result","type","console","error","signUpAPI","signUpData","logOutAPI","loadUserAPI","get","log","HELLO_SAGA"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user'\nimport axios from 'axios';\n// const HELLO_SAGA = 'HELLO_SAGA';\n\n\nfunction logInAPI(logInData) {\n// 서버에 요청 보내는 부분\n    return axios.post('/user/login', logInData, {\n        withCredentials: true,      //  쿠키 교환 with backend \n    });\n}\n\nfunction* logIn(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        //yield delay( 2000);\n        const result = yield call(logInAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n    // while(true){\n    //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n    //     yield put( {            // put 은 redux 에 dispatch 와 동일\n    //         type: LOG_IN_SUCCESS,\n    //     });\n    // }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut(action) {\n    try {\n        yield call(logOutAPI);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n    \n    return axios.get('/user/', {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser() {\n    try {\n        const result = yield call(loadUserAPI);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_USER_FAILURE,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}