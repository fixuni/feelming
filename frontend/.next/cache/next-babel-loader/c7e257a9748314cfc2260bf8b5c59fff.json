{"ast":null,"code":"var _jsxFileName = \"/app/frontend/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport PostImages from './PostImages';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]); //console.log(\"post.createdAt  : \", post.createdAt)\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n    ,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, v));\n      }\n\n      return v;\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \" \\uC090\\uC57D \")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string //createdAt: PropTypes.string,\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/app/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Form","Input","List","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","Link","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React,{useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport PostImages from './PostImages'\n\n\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const [commentText, setCommentText ] = useState('');\n    const { me } = useSelector( state => state.user);\n    const { commentAdded, isAddingComment } = useSelector( state => state.post);\n    const dispatch = useDispatch();\n\n    const liked = post.Likers && post.Likers.find(v => v.id === me.id);\n\n    const onToggleComment = useCallback( () => {\n        setCommentFormOpened( prev => !prev );\n        if (!commentFormOpened) {\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [ ]);\n\n    const onSubmitComment = useCallback( (e) => {\n        e.preventDefault();\n        if (!me){\n            return alert('로그인이 필요합니다')\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect( () => {\n        setCommentText('');\n    }, [ commentAdded === true ]);\n\n    const onChangeCommentText = useCallback( (e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    const onToggleLike = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        if (liked){     // 좋아요 누른 상태\n            dispatch( {\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            });\n        } else {                                                        // 좋아요 안 누른 상태\n            dispatch( {\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            });\n        }\n    }, [me && me.id, post && post.id, liked])\n\n    //console.log(\"post.createdAt  : \", post.createdAt)\n    return (\n        <div>\n        <Card\n            key={+post.createdAt}\n            //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n            cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\"/>,\n                <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor={\"#eb2f96\"} onClick={onToggleLike} />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\n            ]}\n            extra={<Button>팔로우</Button>} \n        >\n            <Card.Meta\n          avatar={(\n          <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n          </Link>\n          )}\n          title={post.User.nickname}\n          description={(\n          <div>\n            {post.content.split(/(#[^\\s]+)/g).map((v) => {\n              if (v.match(/#[^\\s]+/)) {\n                return (\n                  <Link\n                    href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\n                    as={`/hashtag/${v.slice(1)}`}\n                    key={v}\n                  >\n                    <a>{v}</a>\n                  </Link>\n                );\n              }\n              return v;\n            })}\n          </div>\n          )} \n        />\n        </Card>\n        { commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment} >\n                    <Form.Item>\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}> 삐약 </Button>\n                </Form>\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        //createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}