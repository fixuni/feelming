{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\nimport CommnetForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  var dispatch = useDispatch();\n  var liked = id && post.Likers && post.Likers.find(function (v) {\n    return v.id === id;\n  }); // 리렌더링 되는 에러 잡는 방법  ////////////////////////   에러 잡는 방법/////////////////\n  // const postMemory = useRef(post);\n  // console.log(\"post : \", post)\n  // useEffect( () => {\n  //     console.log('post useEffect : ', postMemory.current,  post,  postMemory.current === post);\n  // }, [post]);\n  // const chk_me = useRef(me);\n  // console.log(\"me : \", me)\n  // useEffect( () => {\n  //     console.log('me useEffect : ', chk_me.current,  me,  chk_me.current === me);\n  // }, [me]);\n\n  var chk_id = useRef(id); // Dom 에 직접 접근하기도하고, 값을 기억하지만 리렌더링하고 싶지 않을때도 사용\n\n  console.log(\"id : \", id);\n  useEffect(function () {\n    console.log('id useEffect : ', chk_id.current, id, chk_id.current === id);\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, [post && post.Followings]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      console.log(\"call onRemovePost() \");\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(CardWrapper, null, __jsx(Card //key={+post.createdAt}\n  //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n  , {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \" \\uC218\\uC815 \"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD588\\uC2B5\\uB2C8\\uB2E4\") : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onUnfollow: onUnfollow,\n      onFollow: onFollow\n    }) // extra={!me || post.User.id === me.id\n    //     ? null\n    //     : me.Followings && me.Followings.find(v => v.id === post.User.id)\n    //       ? <Button onClick={onUnfollow(post.User.id)} type='primary'>언팔로우</Button>\n    //       : <Button onClick={onFollow(post.User.id)} >팔로우</Button>\n    //   }\n\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  }), moment(post.createdAt).format('YYYY.MM.DD.')), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommnetForm, {\n    post: post\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["/app/frontend/containers/PostCard.js"],"names":["React","useState","useCallback","useEffect","useRef","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","useSelector","useDispatch","Link","PostImages","PostCardContent","styled","moment","locale","CommnetForm","FollowButton","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","me","dispatch","liked","Likers","find","v","chk_id","console","log","current","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","Followings","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","content","createdAt","format","Comments","length","item"],"mappings":"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","sourcesContent":["import React,{useState, useCallback, useEffect, useRef } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from '../components/PostImages'\nimport PostCardContent from '../components/PostCardContent';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\n\nimport CommnetForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\n\n\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, \n    REMOVE_POST_REQUEST } from '../reducers/post';\n\n\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const id = useSelector(state => state.user.me && state.user.me.id);\n    const dispatch = useDispatch();\n\n    const liked = id && post.Likers && post.Likers.find(v => v.id === id);\n\n\n    // 리렌더링 되는 에러 잡는 방법  ////////////////////////   에러 잡는 방법/////////////////\n    // const postMemory = useRef(post);\n    // console.log(\"post : \", post)\n    // useEffect( () => {\n    //     console.log('post useEffect : ', postMemory.current,  post,  postMemory.current === post);\n    // }, [post]);\n\n    // const chk_me = useRef(me);\n    // console.log(\"me : \", me)\n    // useEffect( () => {\n    //     console.log('me useEffect : ', chk_me.current,  me,  chk_me.current === me);\n    // }, [me]);\n\n    const chk_id = useRef(id);      // Dom 에 직접 접근하기도하고, 값을 기억하지만 리렌더링하고 싶지 않을때도 사용\n    console.log(\"id : \", id)\n    useEffect( () => {\n        console.log('id useEffect : ', chk_id.current,  id,  chk_id.current === id);\n    }, [id]);\n\n\n    const onToggleComment = useCallback(() => {\n        setCommentFormOpened(prev => !prev);\n        if (!commentFormOpened) {\n          dispatch({\n            type: LOAD_COMMENTS_REQUEST,\n            data: post.id,\n          });\n        }\n      }, []);\n    \n    const onToggleLike = useCallback( () => {\n        if (!id) {\n            return alert('로그인이 필요합니다');\n        }\n        if (liked){     // 좋아요 누른 상태\n            dispatch( {\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            });\n        } else {                                                        // 좋아요 안 누른 상태\n            dispatch( {\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            });\n        }\n    }, [id, post && post.id, liked])\n\n    const onRetweet = useCallback( () => {\n        if (!id) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        });\n    }, [id, post && post.id]);\n\n    const onFollow = useCallback( userId => () => {\n        dispatch({\n            type: FOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, [ post && post.Followings]);\n\n    const onUnfollow = useCallback( userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const onRemovePost = useCallback( userId => () => {\n        console.log(\"call onRemovePost() \")\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: userId,\n        });\n    },[]);\n\n\n    return (\n        <CardWrapper>\n        <Card\n            //key={+post.createdAt}\n            //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n            cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n                <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor={\"#eb2f96\"} onClick={onToggleLike} />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Popover\n                    key='ellipsis'\n                    content={(\n                        <Button.Group>\n                            {id && post.UserId === id\n                                ? (\n                                    <>\n                                        <Button> 수정 </Button>\n                                        <Button type=\"danger\" onClick={onRemovePost(post.id)} >삭제</Button>\n                                    </>\n                                )\n                            : <Button>신고</Button>}\n                        </Button.Group>\n                    )}\n                    >\n                        <Icon type=\"ellipsis\" />\n                    </Popover>\n            ]}\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗했습니다` : null}\n            extra={<FollowButton post={post} onUnfollow={onUnfollow} onFollow={onFollow} />}\n\n            // extra={!me || post.User.id === me.id\n            //     ? null\n            //     : me.Followings && me.Followings.find(v => v.id === post.User.id)\n            //       ? <Button onClick={onUnfollow(post.User.id)} type='primary'>언팔로우</Button>\n            //       : <Button onClick={onFollow(post.User.id)} >팔로우</Button>\n            //   }\n        >\n            {post.RetweetId && post.Retweet ?\n                (\n                <Card\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\n                >\n                <Card.Meta\n                    avatar={(\n                    <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                    </Link>\n                    )}\n                title={post.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n                />\n                </Card>\n                )\n            : (\n            <Card.Meta\n                avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n          )}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n\n            /> )}\n            {moment(post.createdAt).format('YYYY.MM.DD.')}\n        </Card>\n        { commentFormOpened && (\n            <>\n                <CommnetForm post={post} />\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </CardWrapper>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}