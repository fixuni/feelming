{"version":3,"file":"static/webpack/static/development/pages/profile.js.97022f916baad3591bbc.hot-update.js","sources":["webpack:///./containers/NicknameEditForm.js","webpack:///./containers/PostCard.js","webpack:///./pages/profile.js"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { Button, Form, Input }  from 'antd';\nimport { useDispatch , useSelector} from 'react-redux';\nimport { EDIT_NICKNAME_REQUEST } from '../reducers/user';\n\nconst NicknameEditForm = () => {\n    const [editedName, setEditedName] = useState('');\n    const dispatch = useDispatch();\n    const { me, isEditingNickname } = useSelector( state => state.user);\n\n    const onChangeNickname = useCallback( (e) => {\n        setEditedName(e.target.value);\n    }, []);\n\n    const onEditNickname = useCallback( (e) => {\n        e.preventDefault();\n        dispatch({\n            type: EDIT_NICKNAME_REQUEST,\n            data: editedName,\n        });\n    },[editedName]);\n\n    return (\n        <Form style={{ marginBottom: '20px', border: '1px solid #d9d9d9', padding: '20px'}}  onSubmit={onEditNickname}>>\n            <Input addonBefore='닉네임' value={editedName || (me && me.nickname)} onChange={onChangeNickname}/>\n            <Button type='primary' htmlType=\"submit\" loading={isEditingNickname}>수정</Button>\n        </Form>\n    )\n}\n\nexport default NicknameEditForm;\n","import React,{useState, useCallback, useEffect, useImperativeHandle } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from '../components/PostImages'\nimport PostCardContent from '../components/PostCardContent';\nimport styled from 'styled-components';\n\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, \n    REMOVE_POST_REQUEST } from '../reducers/post';\n\n\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n    console.log(\"post hashtag : \", post.content)\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const [commentText, setCommentText ] = useState('');\n    const { me } = useSelector( state => state.user);\n    const { commentAdded, isAddingComment } = useSelector( state => state.post);\n    const dispatch = useDispatch();\n\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n    const onToggleComment = useCallback( () => {\n        setCommentFormOpened( prev => !prev );\n        if (!commentFormOpened) {\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [ ]);\n\n    const onSubmitComment = useCallback( (e) => {\n        e.preventDefault();\n        if (!me){\n            return alert('로그인이 필요합니다')\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect( () => {\n        setCommentText('');\n    }, [ commentAdded === true ]);\n\n    const onChangeCommentText = useCallback( (e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    const onToggleLike = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        if (liked){     // 좋아요 누른 상태\n            dispatch( {\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            });\n        } else {                                                        // 좋아요 안 누른 상태\n            dispatch( {\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            });\n        }\n    }, [me && me.id, post && post.id, liked])\n\n    const onRetweet = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        });\n    }, [me && me.id, post && post.id]);\n\n    const onFollow = useCallback( userId => () => {\n        dispatch({\n            type: FOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, [me && me.id, post && post.Followings]);\n\n    const onUnfollow = useCallback( userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const onRemovePost = useCallback( userId => () => {\n        console.log(\"call onRemovePost() \")\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: userId,\n        });\n    },[]);\n\n\n    return (\n        <CardWrapper>\n        <Card\n            //key={+post.createdAt}\n            //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n            cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n                <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor={\"#eb2f96\"} onClick={onToggleLike} />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Popover\n                    key='ellipsis'\n                    content={(\n                        <Button.Group>\n                            {me && post.UserId === me.id\n                                ? (\n                                    <>\n                                        <Button> 수정 </Button>\n                                        <Button type=\"danger\" onClick={onRemovePost(post.id)} >삭제</Button>\n                                    </>\n                                )\n                            : <Button>신고</Button>}\n                        </Button.Group>\n                    )}\n                    >\n                        <Icon type=\"ellipsis\" />\n                    </Popover>\n            ]}\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗했습니다` : null}\n    \n            extra={!me || post.User.id === me.id\n                ? null\n                : me.Followings && me.Followings.find(v => v.id === post.User.id)\n                  ? <Button onClick={onUnfollow(post.User.id)} type='primary'>언팔로우</Button>\n                  : <Button onClick={onFollow(post.User.id)} >팔로우</Button>\n              }\n        >\n            {post.RetweetId && post.Retweet ?\n                (\n                <Card\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\n                >\n                <Card.Meta\n                    avatar={(\n                    <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                    </Link>\n                    )}\n                title={post.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n                />\n                </Card>\n                )\n            : (\n            <Card.Meta\n                avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n          )}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n\n            /> )}\n        </Card>\n        { commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment} >\n                    <Form.Item>\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}> 삐약 </Button>\n                </Form>\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </CardWrapper>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;","import React, { useEffect, useCallback, useState } from 'react';\nimport { Form, Button, List, Card, Icon, Input } from 'antd';\nimport PostCard from '../containers/PostCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport NicknameEditForm from '../containers/NicknameEditForm';\n\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, UNFOLLOW_USER_REQUEST, \n    REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\n \n\nconst Profile = () => {\n    const dispatch = useDispatch();\n    const { me, followerList, followingList, hasMoreFollower, hasMoreFollowing } = useSelector( state => state.user );\n    const { mainPosts,  } = useSelector ( state => state.post );\n    // useEffect ( () => {\n    //     if (me) {\n    //     }\n    // }, [me && me.id ]);\n\n    const onUnfollow = useCallback(userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const onRemoveFollower = useCallback( userId => () => {\n        dispatch({\n            type: REMOVE_FOLLOWER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const loadMoreFollowings = useCallback( () => {\n        dispatch({\n            type: LOAD_FOLLOWINGS_REQUEST,\n            offset: followingList.length,\n        });\n    }, [followingList.length])\n\n    const loadMoreFollowers = useCallback( () => {\n        dispatch({\n            type: LOAD_FOLLOWERS_REQUEST,\n            offset: followerList.length,\n        });\n    }, [followerList.length]);\n\n    return (\n    <div>\n        <NicknameEditForm />\n        <List\n            style={{ marginBottom: '20px' }}\n            grid={{ gutter: 4, xs: 2, md: 3 }}\n            size=\"small\"\n            header={<div> 팔로윙 목록 </div> }\n            loadMore={hasMoreFollowing &&  <Button style={{ width: '100%' }} onClick={loadMoreFollowings}> 더 보기 </Button>}\n            dataSource={followingList}\n            renderItem={item => (\n                <List.Item style={{ marginTop: '20px' }}>\n                    <Card actions={[<Icon key='icon' type=\"stop\" />]} onClick={onUnfollow(item.id)}>\n                        <Card.Meta description={item.nickname} />\n                    </Card>\n                </List.Item>\n            )}\n        />\n        <List\n            style={{ marginBottom: '20px' }}\n            grid={{ gutter: 4, xs: 2, md: 3 }}\n            size=\"small\"\n            header={<div> 팔로워 목록 </div> }\n            loadMore={hasMoreFollower && <Button style={{ width: '100%' }} onClick={loadMoreFollowers}> 더 보기 </Button>}\n            dataSource={followerList}\n            renderItem={item => (\n                <List.Item style={{ marginTop: '20px' }}>\n                    <Card actions={[<Icon key='icon' type=\"stop\" />]} onClick={onRemoveFollower(item.id)}>\n                        <Card.Meta description={item.nickname} />\n                    </Card>\n                </List.Item>\n            )}\n        />\n        <div>\n            {mainPosts.map(c => (\n                <PostCard key={+c.createdAt} post={c} />\n            ))}\n        </div>\n    </div>\n    );\n};\n\nProfile.getInitialProps = async (context) => {\n    const state = context.store.getState();\n    // 이 직전에 LOAD_USERS_REQUEST  가 완료돼야함\n    // 따라서 me = null 이면 나로 인식하게 아래 reducer 를 처리하다\n    context.store.dispatch({\n            type: LOAD_FOLLOWERS_REQUEST,\n            data: state.user.me && state.user.me.id,\n    });\n    context.store.dispatch({\n            type: LOAD_FOLLOWINGS_REQUEST,\n            data: state.user.me && state.user.me.id,\n    });\n    context.store.dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            data: state.user.me && state.user.me.id,\n    });\n}\nexport default Profile;"],"mappings":"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","sourceRoot":""}