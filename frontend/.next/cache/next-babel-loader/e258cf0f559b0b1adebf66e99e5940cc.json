{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"코드\"\n    },\n    content: \"첫 번째 게시글\",\n    img: \"https://blog.yena.io/assets/post-img/171123-nachoi-300.jpg\",\n    Comments: []\n  }],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공,\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n};\nvar dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '코드'\n  },\n  content: '나는 더미입니다',\n  Comments: []\n};\nvar dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: 2\n  },\n  createdAt: new Date(),\n  content: '더미 댓글입니다'\n};\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_MAIN_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          //mainPosts: [dummyPost, ...state.mainPosts],\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [dummyComment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        }); // const postIndex = state.mainPosts.findIndex( v => v.id === action.data.postId);\n        // const post = state.mainPosts[postIndex];\n        // const Comments = [...post.Comments, dummyComment];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = { ...post, Comments};\n        // console.log(\"mainPosts: \", mainPosts[postIndex]);\n        // return {\n        //     ...state,\n        //     isAddingComment: false,\n        //     //mainPosts: [dummyPost, ...state.mainPosts],\n        //     mainPosts,\n        //     commentAdded: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","dummyPost","dummyComment","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","reducer","state","action","type","data","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["export const initialState = {\n    mainPosts: [{\n        id: 1,\n        User: {\n            id: 1,\n            nickname: \"코드\",\n        },\n        content: \"첫 번째 게시글\",\n        img: \"https://blog.yena.io/assets/post-img/171123-nachoi-300.jpg\",\n        Comments: [],\n    }],                 // 화면에 보일 포스트들\n    imagePaths: [],     // 미리보기 이미지 경로\n    addPostErrorReason:'',  // 포스트 업로드 실패 사유\n    isAddingPost: false,        // 포스트 업로드 중\n    postAdded: false,           // 포스트 업로드 성공,\n    isAddingComment:false,\n    addCommentErrorReason: '',\n    commentAdded: false,\n};\n\nconst dummyPost = {\n    id: 2,\n    User: {\n        id: 1,\n        nickname: '코드',\n    },\n    content: '나는 더미입니다',\n    Comments: [],\n}\n\nconst dummyComment = {\n    id: 1,\n    User: {\n        id: 1,\n        nickname: 2,\n    },\n    createdAt: new Date(),\n    content: '더미 댓글입니다',\n}\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_MAIN_POSTS_REQUEST: {\n            return {\n                ...state,\n                mainPosts: [],\n            };\n        }\n        case LOAD_MAIN_POSTS_SUCCESS: {\n            return {\n                ...state,     \n                mainPosts: action.data,\n \n            };\n        }\n        case LOAD_MAIN_POSTS_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case ADD_POST_REQUEST: {\n            return {\n                ...state,\n                isAddingPost: false,\n                addPostErrorReason: '',\n                postAdded: false,\n            };\n        }\n        case ADD_POST_SUCCESS: {\n            return {\n                ...state,\n                isAddingPost: false,\n                //mainPosts: [dummyPost, ...state.mainPosts],\n                mainPosts: [action.data, ...state.mainPosts],\n                postAdded: true,\n            };\n        }\n        case ADD_POST_FAILURE: {\n            return {\n                ...state,\n                isAddingPost: false,\n                addPostErrorReason: action.error,\n            };\n        }\n        case ADD_COMMENT_REQUEST: {\n            return {\n                ...state,\n                isAddingComment: true,\n                addCommentErrorReason: '',\n                commentAdded: false,\n            };\n        }\n        case ADD_COMMENT_SUCCESS: {\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n            const post = state.mainPosts[postIndex];\n            const Comments = [...post.Comments, dummyComment];\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = { ...post, Comments };\n            return {\n                ...state,\n                isAddingComment: false,\n                mainPosts,\n                commentAdded: true,\n            };\n            // const postIndex = state.mainPosts.findIndex( v => v.id === action.data.postId);\n            // const post = state.mainPosts[postIndex];\n            // const Comments = [...post.Comments, dummyComment];\n            // const mainPosts = [...state.mainPosts];\n            // mainPosts[postIndex] = { ...post, Comments};\n            \n            // console.log(\"mainPosts: \", mainPosts[postIndex]);\n\n            // return {\n            //     ...state,\n            //     isAddingComment: false,\n            //     //mainPosts: [dummyPost, ...state.mainPosts],\n            //     mainPosts,\n            //     commentAdded: true,\n            // };\n        }\n        case ADD_COMMENT_FAILURE: {\n            return {\n                ...state,\n                isAddingComment: false,\n                addCommentErrorReason: action.error,\n            };\n        }\n        default: {\n            return {\n                ...state,\n            }\n        }\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}