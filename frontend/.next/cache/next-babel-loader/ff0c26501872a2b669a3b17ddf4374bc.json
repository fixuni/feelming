{"ast":null,"code":"var _jsxFileName = \"/app/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from 'react';\nimport PostCard from '../containers/PostCard';\nimport PostForm from '../containers/PostForm';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    // console.log(window.scrollY, document.documentElement.clientHeight,document.documentElement.scrollHeight);\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n        }\n\n        countRef.current.push(lastId);\n      }\n    }\n\n    ;\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, me && __jsx(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home; // function mapStateToProps(state) {\n//     return {\n//         user: state.user,\n//     };\n// }\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         login: () => dispatch(loginAction),\n//         logout: () => dispatch(logoutAction)\n//     };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n/*\n\n // Docker 재실행 방법\n docker ps          // 과거 실행 내역 조사 \n docker restart 이름,\n docker exec -it web(이름) /bin/bash\n npm run dev  // 백엔드 프런트엔드 각각 위치에서 실행 \n\n \n // Docker 초기 실행 방법\n Docker 실행 명령어\n docker mysql 실행\n docker run --name mysql -e MYSQL_ROOT_PASSWORD=mypass -d -p 3306:3306 mysql\n\n\n mysql 컨테이너에 접속하기\n docker exec -it mysql /bin/bash\n\n mysql 데이터베이스에 접근하기\n mysql -u root -p password\n\n\n\n\n Nodejs 서버 + mysql 연결하여  실행 \n docker run -it -p 3060:3060 -p 3065:3065 --volume=$(pwd):/app/  --name web --link mysql-db  -d node  \n\n NodeJs 컨테이너에 접속하기 \n docker exec -it web /bin/bash\n\n mysql 컨테이너 접속 아이피 찾기\n docker inspect bridge\n\n 찾은 아이피를 백엔드 db 설정 파일에 적는다\n /backend/config/config.js\n\n 백엔드와 프런트 서버를 각각 가동한다.\n\n\n\n\n Cube.js 가동하는 방법 on Docker\n 4000, 3050 포트를 호스트와 연결해 준다.\n docker run -it -p 4000:4000 -p 3050:3050 --volume=$(pwd):/app/ --name cubejs --link mysql-db -d node\n \n\n*/","map":null,"metadata":{},"sourceType":"module"}