{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHello),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/login');\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(LOG_IN_REQUEST, login);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            // put 은 redux 에 dispatch 와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 0;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('http://localhost:3065/api/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          //yield take(HELLO_SAGA);\n          //yield takeLatest(HELLO_SAGA, hello);\n          console.log(\"Before Saga\");\n\n        case 1:\n          if (!true) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 4;\n          return take(HELLO_SAGA);\n\n        case 4:\n          console.log(\"Hello Saga\");\n          _context5.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(HELLO_SAGA,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return delay(1000);\n\n                  case 2:\n                    _context6.next = 4;\n                    return put({\n                      type: 'BYE_SAGA'\n                    });\n\n                  case 4:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchLogin), // 이벤트 리스너로 이해, 순서 의미 없음\n          fork(watchSignUp) // call()   // 동기 호출\n          // fork()   // 비동기 호출\n          // watchHello(),\n          // //helloSaga(),\n          // watchLogin(),\n          // watchSignup(),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked7);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","helloSaga","watchHello","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","HELLO_SAGA","loginAPI","post","type","console","error","signUpAPI","signUpData","action","data","log"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'\nimport axios from 'axios';\n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n// 서버에 요청 보내는 부분\n    return axios.post('/login');\n}\n\nfunction* login() {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        yield delay( 2000);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogin() {\n    while(true){\n        yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n        yield put( {            // put 은 redux 에 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n        });\n    }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('http://localhost:3065/api/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }"]},"metadata":{},"sourceType":"module"}