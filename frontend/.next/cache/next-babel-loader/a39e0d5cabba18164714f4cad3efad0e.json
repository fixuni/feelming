{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios'; // const HELLO_SAGA = 'HELLO_SAGA';\n\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  console.log(\"chk loginData : \", loginData); // 서버에 요청 보내는 부분\n\n  return axios.post('/user/login', loginData, {\n    withCredentials: true //  쿠키 교환 with backend \n\n  });\n}\n\nfunction* login(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    // yield call(loginAPI);       // call 동기 호출\n    //yield delay( 2000);\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login); // while(true){\n  //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n  //     yield put( {            // put 은 redux 에 dispatch 와 동일\n  //         type: LOG_IN_SUCCESS,\n  //     });\n  // }\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    //yield call(signUpAPI);       // call 동기 호출\n    //yield delay(2000);\n    yield call(signUpAPI, action.data); //throw new Error('에러 발생');\n\n    yield put({\n      // put 은 dispatch 와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n  //yield take(HELLO_SAGA);\n  //yield takeLatest(HELLO_SAGA, hello);\n  console.log(\"Before Saga\");\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchSignUp) // call()   // 동기 호출\n  // fork()   // 비동기 호출\n  // watchHello(),\n  // //helloSaga(),\n  // watchLogin(),\n  // watchSignup(),\n  ]);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","defaults","baseURL","loginAPI","loginData","console","log","post","withCredentials","login","action","result","data","type","e","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","helloSaga","HELLO_SAGA","watchHello","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAA0E,oBAA1E;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAEzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,SAAhC,EAFyB,CAG7B;;AACI,SAAOJ,KAAK,CAACO,IAAN,CAAW,aAAX,EAA0BH,SAA1B,EAAqC;AACxCI,IAAAA,eAAe,EAAE,IADuB,CACZ;;AADY,GAArC,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA;AACA;AACA,UAAMC,MAAM,GAAG,MAAMrB,IAAI,CAACa,QAAD,EAAWO,MAAM,CAACE,IAAlB,CAAzB;AACA,UAAMrB,GAAG,CAAE;AAAa;AACpBsB,MAAAA,IAAI,EAAElB,cADC;AAEPiB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFN,KAAF,CAAT;AAIH,GATD,CASE,OAAOE,CAAP,EAAU;AACRT,IAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACA,UAAMvB,GAAG,CAAE;AACPsB,MAAAA,IAAI,EAAEjB,cADC;AAEPmB,MAAAA,KAAK,EAAED;AAFA,KAAF,CAAT;AAIH;AACJ;;AAED,UAAUE,UAAV,GAAuB;AACnB,QAAM3B,SAAS,CAACK,cAAD,EAAiBe,KAAjB,CAAf,CADmB,CAEnB;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,SAASQ,SAAT,CAAmBC,UAAnB,EAA+B;AAC3B;AACA,SAAOlB,KAAK,CAACO,IAAN,CAAW,QAAX,EAAqBW,UAArB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBT,MAAjB,EAAyB;AACrB,MAAI;AACA;AACA;AACA;AACA,UAAMpB,IAAI,CAAC2B,SAAD,EAAYP,MAAM,CAACE,IAAnB,CAAV,CAJA,CAKA;;AAEA,UAAMrB,GAAG,CAAE;AAAa;AACpBsB,MAAAA,IAAI,EAAEf;AADC,KAAF,CAAT;AAGH,GAVD,CAUE,OAAOgB,CAAP,EAAU;AACRT,IAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACA,UAAMvB,GAAG,CAAE;AACPsB,MAAAA,IAAI,EAAEd;AADC,KAAF,CAAT;AAGH;AACJ;;AAED,UAAUqB,WAAV,GAAwB;AACpB,QAAM/B,SAAS,CAACQ,eAAD,EAAkBsB,MAAlB,CAAf;AACH;;AAED,UAAUE,SAAV,GAAsB;AAClB;AACA;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,SAAM,IAAN,EAAY;AACR,UAAMd,IAAI,CAAC8B,UAAD,CAAV;AACJjB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACC;AACJ;;AAED,UAAUiB,UAAV,GAAuB;AACnB,QAAMnC,UAAU,CAACkC,UAAD,EAAa,aAAY;AACrC,UAAM7B,KAAK,CAAE,IAAF,CAAX;AACA,UAAMF,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAChC,QAAMtC,GAAG,CAAC,CACNC,IAAI,CAAC6B,UAAD,CADE,EACkB;AACxB7B,EAAAA,IAAI,CAACiC,WAAD,CAFE,CAGN;AACA;AACA;AACA;AACA;AACA;AARM,GAAD,CAAT;AAUH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'\nimport axios from 'axios';\n\n// const HELLO_SAGA = 'HELLO_SAGA';\n\naxios.defaults.baseURL = 'http://localhost:3065/api'\n\nfunction loginAPI(loginData) {\n\n    console.log(\"chk loginData : \", loginData);\n// 서버에 요청 보내는 부분\n    return axios.post('/user/login', loginData, {\n        withCredentials: true,      //  쿠키 교환 with backend \n    });\n}\n\nfunction* login(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        //yield delay( 2000);\n        const result = yield call(loginAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery(LOG_IN_REQUEST, login);\n    // while(true){\n    //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n    //     yield put( {            // put 은 redux 에 dispatch 와 동일\n    //         type: LOG_IN_SUCCESS,\n    //     });\n    // }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }"]},"metadata":{},"sourceType":"module"}