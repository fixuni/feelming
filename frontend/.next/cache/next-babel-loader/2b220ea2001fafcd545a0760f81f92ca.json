{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  console.log(\" addPostAPI() : \", postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(2000);\n    console.log('in addPost Saga : ', action);\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"chk result : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI() {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(data) {\n  return axios.get(`/post/${data.postId}/comment`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","axios","addPostAPI","postData","console","log","post","withCredentials","addPost","action","result","call","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","watchLoadHashtagPosts","LOAD_HASHTAG_POSTS_REQUEST","loadUserPostsAPI","id","loadUserPosts","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","watchLoadUserPosts","LOAD_USER_POSTS_REQUEST","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","LOAD_COMMENTS_SUCCESS","comments","LOAD_COMMENTS_FAILURE","watchloadComments","LOAD_COMMENTS_REQUEST","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n    console.log(\" addPostAPI() : \", postData)\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        console.log('in addPost Saga : ', action)\n        const result = yield call(addPostAPI, action.data);\n        console.log(\"chk result : \", result)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n\nfunction loadMainPostsAPI() {\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\n\n\nfunction loadHashtagPostsAPI() {\n    return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\n\nfunction loadUserPostsAPI() {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\n\nfunction addCommentAPI(data) {\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nfunction loadCommentsAPI(data) {\n    return axios.get( `/post/${data.postId}/comment`)\n}\n\nfunction* loadComments(action) {\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}