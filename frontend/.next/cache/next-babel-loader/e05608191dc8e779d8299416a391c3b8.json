{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchloadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  //console.log('in loadMainPosts Saga ');\n  return axios.get('/posts');\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserPostsAPI() {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          console.log(\"addComment() in sagas : \", action);\n          _context9.next = 4;\n          return call(addCommentAPI, action.data);\n\n        case 4:\n          result = _context9.sent;\n          console.log(\"addComment() in sagas result : \", result);\n          _context9.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 8:\n          _context9.next = 14;\n          break;\n\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  console.log('loadCommentsAPI()  postId : ', postId);\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          console.log('loadComment action : ', action);\n          _context11.prev = 1;\n          _context11.next = 4;\n          return call(loadCommentsAPI, action.data);\n\n        case 4:\n          result = _context11.sent;\n          console.log('loadComments() result.data : ', result.data);\n          console.log('loadComments() action.data : ', action.data);\n          _context11.next = 9;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 9:\n          _context11.next = 15;\n          break;\n\n        case 11:\n          _context11.prev = 11;\n          _context11.t0 = _context11[\"catch\"](1);\n          _context11.next = 15;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[1, 11]]);\n}\n\nfunction watchloadComments() {\n  return _regeneratorRuntime.wrap(function watchloadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 12;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n          fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["/app/frontend/sagas/post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","addComment","watchAddComment","loadComments","watchloadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","postSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","error","loadMainPostsAPI","get","loadHashtagPostsAPI","tag","loadUserPostsAPI","id","addCommentAPI","console","log","postId","content","comment","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","retweetAPI","RETWEET_SUCCESS","RETWEET_FAILURE","alert","response","RETWEET_REQUEST"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n } from '../reducers/post';\nimport axios from 'axios';\n\n\nfunction addPostAPI(postData) {\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        \n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n    //console.log('in loadMainPosts Saga ');\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n    //console.log('in loadMainPosts Saga ');\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n    return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    console.log('loadCommentsAPI()  postId : ', postId);\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    console.log('loadComment action : ', action)\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        console.log('loadComments() result.data : ', result.data);\n        console.log('loadComments() action.data : ', action.data);\n\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        //console.log('loadComments FAILURE : ', e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\n\nfunction uploadImagesAPI(formData) {\n    return axios.post( `/post/images`, formData)\n}\n\nfunction* uploadImages(action) {\n    try{\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n    return axios.post( `/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action) {\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n    return axios.delete( `/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action) {\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n    return axios.post( `/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action) {\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n        alert(e.response && response.data);\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}