{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport produce from 'immer'; // const dummyUser = {\n//     nickname: '코드',\n//     Post: [],\n//     Followings: [],\n//     Followers: [],\n//     id: 1,  \n// };\n\nexport const initialState = {\n  // isLoggedIn: false,\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실퍠 상유\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null,\n  // 남의 정보\n  isEditingNickname: false,\n  editNicknameErrorReason: '',\n  hasMoreFollower: false,\n  hasMoreFollowing: false\n};\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; // post reducier 를 호출하는 부분 (다른 리듀서 호출)\n\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const signupAction = data => ({\n  type: SIGN_UP_REQUEST,\n  data: data\n}); // export const signupAction = (data) => {\n//     return {\n//         type: SIGN_UP_REQUEST,\n//         data: data,\n//     };\n// };\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_TO_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: [{\n                id: action.data\n              }, ...state.me.Posts]\n            })\n          });\n        }\n        ;\n\n      case LOG_IN_REQUEST:\n        {\n          draft.isLoggingIn = true;\n          draft.logInErrorReason = '';\n          break; // return {\n          //     ...state,\n          //     isLoggingIn: true,\n          // }\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          draft.isLoggingIn = false;\n          draft.me = action.data;\n          draft.isLoading = false;\n          draft.logInErrorReason = '';\n          break; // return {\n          //     ...state,\n          //     isLoggingIn: false,\n          //     //isLoggedIn: true,\n          //     //me: dummyUser,\n          //     me: action.data,\n          //     isLoading: false,\n          // }\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          draft.isLoggingIn = false;\n          draft.logInErrorReason = action.error;\n          draft.me = null;\n          break; // return {\n          //     ...state,\n          //     isLoggingIn: false,\n          //     //isLoggedIn: false,\n          //     logInErrorReason: action.error,\n          //     me: null,\n          // }\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          draft.isLoggingOut = true;\n          break;\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          draft.isLoggingOut = true;\n          draft.me = null;\n          break;\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          draft.isSigningUp = false;\n          draft.isSignedUp = true;\n          draft.signUpErrorReason = '';\n          break;\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          draft.isSigningUp = false;\n          draft.isSignedUp = true;\n          break; // return {\n          //     ...state,\n          //     isSigningUp: false,\n          //     isSignedUp: true,\n          //     me : {\n          //         nickname: action.nickname,\n          //         // Post: [],\n          //         // Followings: [],\n          //         // Followers: [],\n          //         id: action.id,\n          //         userId: action.userId, \n          //     }\n          // };\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          draft.isSigningUp = false;\n          draft.signUpErrorReason = action.error;\n          break; // return {\n          //     ...state,\n          //     isSigningUp: false,\n          //     signUpErrorReason: action.error,\n          // };\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          break; // return {\n          //     ...state,\n          // }\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            draft.me = action.data;\n            break;\n          }\n\n          draft.userInfo = action.data;\n          break; // if(action.me){\n          //     return {\n          //         ...state,\n          //         me: action.data,\n          //     };    \n          // }\n          // return {\n          //     ...state,\n          //     userInfo: action.data,\n          // }\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          break; // return {\n          //     ...state,\n          // };\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          break; // return {\n          //     ...state,\n          // }\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followings.unshift({\n            id: action.data\n          });\n          break; // return {\n          //   ...state,\n          //   me: {\n          //     ...state.me,\n          //     Followings: [{ id: action.data }, ...state.me.Followings],\n          //   },\n          // };\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          const index = draft.me.Followings.findIndex(v => v.id === action.data);\n          draft.me.Followings.splice(index, 1);\n          const index2 = draft.followingList.findIndex(v => v.id === action.data);\n          draft.followingList.splice(index2, 1);\n          break; // return {\n          //   ...state,\n          //   me: {\n          //     ...state.me,\n          //     Followings: state.me.Followings.filter(v => v.id !== action.data),\n          //   },\n          //   followingList: state.followingList.filter(v => v.id !== action.data),\n          // };\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            // 처음 데이터를 가져올 때는 더보기 버튼을 보여준다\n            hasMoreFollower: action.offset ? state.hasMoreFollower : true\n          });\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followerList: state.followerList.concat(action.data),\n            hasMoreFollower: action.data.length === 3 // true or false\n\n          });\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            hasMoreFollowing: action.offset ? state.hasMoreFollowing : true\n          });\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followingList: state.followingList.concat(action.data),\n            hasMoreFollowing: action.data.length === 3 // true or false\n\n          });\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          //console.log(\"LOAD_FOLLOWINGS_FAILURE : \", action.data)\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followers: state.me.Followers.filter(v => v.id !== action.data)\n            }),\n            followerList: state.followerList.filter(v => v.id !== action.data)\n          });\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: true,\n            editNicknameErrorReason: ''\n          });\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            me: _objectSpread({}, state.me, {\n              nickname: action.data\n            })\n          });\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            editNicknameErrorReason: action.error\n          });\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: state.me.Posts.filter(v => v.id !== action.data)\n            })\n          });\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/app/frontend/reducers/user.js"],"names":["produce","initialState","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","isEditingNickname","editNicknameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","REMOVE_POST_OF_ME","signupAction","data","type","reducer","state","action","draft","Posts","id","isLoading","error","isSignedUp","Followings","unshift","index","findIndex","v","splice","index2","offset","concat","length","Followers","filter","nickname"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\n// const dummyUser = {\n//     nickname: '코드',\n//     Post: [],\n//     Followings: [],\n//     Followers: [],\n//     id: 1,  \n// };\n\n\n\nexport const initialState = {\n   // isLoggedIn: false,\n    isLoggingOut: false,   // 로그아웃 시도중\n    isLoggingIn: false,    // 로그인 시도중\n    logInErrorReason: '',  // 로그인 실퍠 상유\n    signedUp: false,      // 회원가입 성공\n    isSigningUp: false,   // 회원가입 시도중\n    signUpErrorReason: '', // 회원가입 실패 사유\n    me: null,\n    followingList: [],     // 팔로잉 리스트\n    followerList: [],     // 팔로워 리스트\n    userInfo: null,        // 남의 정보\n    isEditingNickname: false,\n    editNicknameErrorReason: '',\n    hasMoreFollower: false,\n    hasMoreFollowing: false,\n};\n\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\n\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\n\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\n\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\n\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\n\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';     // post reducier 를 호출하는 부분 (다른 리듀서 호출)\n\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\n\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n\nexport const signupAction = (data) => ({\n    type: SIGN_UP_REQUEST,\n    data: data,\n});\n// export const signupAction = (data) => {\n//     return {\n//         type: SIGN_UP_REQUEST,\n//         data: data,\n//     };\n// };\n\nconst reducer = (state = initialState, action ) => {\n    return produce(state, (draft) => {\n    switch (action.type) {\n        case ADD_POST_TO_ME: {\n            return {\n                ...state,\n                me: {\n                    ...state.me,\n                    Posts: [{ id: action.data }, ...state.me.Posts],\n                },\n            };\n        };\n        case LOG_IN_REQUEST: {\n            draft.isLoggingIn = true;\n            draft.logInErrorReason = '';\n            break;\n            // return {\n            //     ...state,\n            //     isLoggingIn: true,\n            // }\n        }\n        case LOG_IN_SUCCESS: {\n            draft.isLoggingIn = false;\n            draft.me = action.data;\n            draft.isLoading = false;\n            draft.logInErrorReason = '';\n            break;\n            // return {\n            //     ...state,\n            //     isLoggingIn: false,\n            //     //isLoggedIn: true,\n            //     //me: dummyUser,\n            //     me: action.data,\n            //     isLoading: false,\n            // }\n        }\n        case LOG_IN_FAILURE: {\n            draft.isLoggingIn =  false;\n            draft.logInErrorReason = action.error;\n            draft.me = null;\n            break;\n\n            // return {\n            //     ...state,\n            //     isLoggingIn: false,\n            //     //isLoggedIn: false,\n            //     logInErrorReason: action.error,\n            //     me: null,\n            // }\n        }\n        case LOG_OUT_REQUEST: {\n            draft.isLoggingOut = true;\n            break;\n        }\n        case LOG_OUT_SUCCESS: {\n            draft.isLoggingOut = true;\n            draft.me = null;\n            break;\n        }\n        case SIGN_UP_REQUEST: {\n            draft.isSigningUp = false;\n            draft.isSignedUp = true;\n            draft.signUpErrorReason = '';\n            break;\n        }\n        case SIGN_UP_SUCCESS: {\n            draft.isSigningUp = false;\n            draft.isSignedUp = true;\n            break;\n            // return {\n            //     ...state,\n            //     isSigningUp: false,\n            //     isSignedUp: true,\n            //     me : {\n            //         nickname: action.nickname,\n            //         // Post: [],\n            //         // Followings: [],\n            //         // Followers: [],\n            //         id: action.id,\n            //         userId: action.userId, \n            //     }\n            // };\n        }\n        case SIGN_UP_FAILURE: {\n            draft.isSigningUp = false;\n            draft.signUpErrorReason = action.error;\n            break;\n            // return {\n            //     ...state,\n            //     isSigningUp: false,\n            //     signUpErrorReason: action.error,\n            // };\n        }\n        case LOAD_USER_REQUEST: {\n            break;\n            // return {\n            //     ...state,\n            // }\n        }\n        case LOAD_USER_SUCCESS: {\n            if (action.me) {\n                draft.me = action.data;\n                break;\n            }\n            draft.userInfo = action.data;\n            break;\n            // if(action.me){\n            //     return {\n            //         ...state,\n            //         me: action.data,\n            //     };    \n            // }\n            // return {\n            //     ...state,\n            //     userInfo: action.data,\n            // }\n        }\n        case LOAD_USER_FAILURE: {\n            break;\n            // return {\n            //     ...state,\n            // };\n        }\n        case FOLLOW_USER_REQUEST: {\n            break;\n            // return {\n            //     ...state,\n            // }\n        }\n        case FOLLOW_USER_SUCCESS: {\n            draft.me.Followings.unshift({ id: action.data });\n            break;\n            // return {\n            //   ...state,\n            //   me: {\n            //     ...state.me,\n            //     Followings: [{ id: action.data }, ...state.me.Followings],\n            //   },\n            // };\n        }\n        case FOLLOW_USER_FAILURE: {\n            break;\n        }\n        case UNFOLLOW_USER_REQUEST: {\n            break;\n        }\n        case UNFOLLOW_USER_SUCCESS: {\n            const index = draft.me.Followings.findIndex( v => v.id === action.data);\n            draft.me.Followings.splice(index,1);\n            const index2 = draft.followingList.findIndex( v => v.id === action.data );\n            draft.followingList.splice(index2, 1);\n            break;\n            // return {\n            //   ...state,\n            //   me: {\n            //     ...state.me,\n            //     Followings: state.me.Followings.filter(v => v.id !== action.data),\n            //   },\n            //   followingList: state.followingList.filter(v => v.id !== action.data),\n            // };\n        }\n        case UNFOLLOW_USER_FAILURE: {\n            return {\n                ...state,\n            }\n        }\n        case LOAD_FOLLOWERS_REQUEST: {\n            return {\n                ...state,\n                // 처음 데이터를 가져올 때는 더보기 버튼을 보여준다\n                hasMoreFollower: action.offset ? state.hasMoreFollower : true,\n            };\n        }\n        case LOAD_FOLLOWERS_SUCCESS: {\n            return {\n              ...state,\n              followerList: state.followerList.concat(action.data),\n              hasMoreFollower: action.data.length === 3, // true or false\n            };\n          }\n        case LOAD_FOLLOWERS_FAILURE: {\n            return {\n                ...state,\n            }\n        }\n        case LOAD_FOLLOWINGS_REQUEST: {\n            return {\n                ...state,\n                hasMoreFollowing: action.offset ? state.hasMoreFollowing : true,\n            }\n        }\n        case LOAD_FOLLOWINGS_SUCCESS: {\n            return {\n              ...state,\n              followingList: state.followingList.concat(action.data),\n              hasMoreFollowing: action.data.length === 3, // true or false\n            };\n          }\n        case LOAD_FOLLOWINGS_FAILURE: {\n            //console.log(\"LOAD_FOLLOWINGS_FAILURE : \", action.data)\n            return {\n                ...state,\n            }\n        }\n        case REMOVE_FOLLOWER_REQUEST: {\n            return {\n                ...state,\n            }\n        }\n        case REMOVE_FOLLOWER_SUCCESS: {\n            return {\n              ...state,\n              me: {\n                  ...state.me,\n                  Followers: state.me.Followers.filter( v=> v.id !== action.data),\n              },\n              followerList: state.followerList.filter(v => v.id !== action.data),\n            };\n          }\n        case REMOVE_FOLLOWER_FAILURE: {\n            return {\n                ...state,\n            }\n        }\n        case EDIT_NICKNAME_REQUEST: {\n            return {\n                ...state,\n                isEditingNickname: true,\n                editNicknameErrorReason: '',\n            }\n        }\n        case EDIT_NICKNAME_SUCCESS: {\n            return {\n              ...state,\n              isEditingNickname: false,\n              me: {\n                  ...state.me,\n                  nickname: action.data,\n              },\n            };\n          }\n        case EDIT_NICKNAME_FAILURE: {\n            return {\n                ...state,\n                editNicknameErrorReason: action.error,\n            }\n        }\n        case REMOVE_POST_OF_ME: {\n            return {\n              ...state,\n              me: {\n                  ...state.me,\n                  Posts: state.me.Posts.filter( v=> v.id !== action.data),\n              },\n            };\n          }\n        default: {\n            return {\n                ...state,\n            }\n        }\n    }\n    });\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}