{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_REQUEST, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  console.log(\" addPostAPI() : \", postData);\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(2000);\n    console.log('in addPost Saga : ', action);\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"chk result : \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI() {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"addComment() in sagas : \", action);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"addComment() in sagas result : \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/post.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_REQUEST","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","axios","addPostAPI","postData","console","log","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchloadComments","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_REQUEST,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS,\n    LOAD_HASHTAG_POSTS_REQUEST,LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS  } from '../reducers/post';\nimport axios from 'axios';\n\n\nfunction addPostAPI(postData) {\n    console.log(\" addPostAPI() : \", postData)\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        console.log('in addPost Saga : ', action);\n        const result = yield call(addPostAPI, action.data);\n        console.log(\"chk result : \", result);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI() {\n    return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}