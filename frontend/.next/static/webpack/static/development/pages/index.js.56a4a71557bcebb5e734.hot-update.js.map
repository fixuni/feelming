{"version":3,"file":"static/webpack/static/development/pages/index.js.56a4a71557bcebb5e734.hot-update.js","sources":["webpack:///./pages/index.js","webpack:///./reducers/post.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector( state => state.user );\n    const { mainPosts } = useSelector( state => state.post );\n\n    const onScroll = () => {\n        console.log(window.scrollY, \n            document.documentElement.clientHeight,\n            document.documentElement.scrollHeight);\n        if (window.scrollY + document.documentElement.clientHeight \n            > document.documentElement.scrollHeight - 300 ) {\n                dispatch({\n                    type: LOAD_MAIN_POSTS_REQUEST,\n                    lastId: mainPosts[mainPosts.length - 1 ].id,\n                })\n            };\n    };\n\n    useEffect( () => {\n        window.addEventListener('scroll', onScroll);\n        return () => {  // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n            window.removeEventListener('scroll', onScroll);\n        }\n    }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n    return (\n        <div>\n            {me && <PostForm /> }\n            {mainPosts.map( (c,index) => {\n                return (\n                    <PostCard key={index} post={c} />\n                );\n            })}\n        </div>\n    );\n};\n\nHome.getInitialProps = async (context) => {\n    context.store.dispatch({\n        type: LOAD_MAIN_POSTS_REQUEST,\n    })\n};\n\nexport default Home;\n\n// function mapStateToProps(state) {\n//     return {\n//         user: state.user,\n//     };\n// }\n\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         login: () => dispatch(loginAction),\n//         logout: () => dispatch(logoutAction)\n//     };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n/*\n\n // Docker 재실행 방법\n docker ps          // 과거 실행 내역 조사 \n docker restart 이름,\n docker exec -it web(이름) /bin/bash\n npm run dev  // 백엔드 프런트엔드 각각 위치에서 실행 \n\n \n // Docker 초기 실행 방법\n Docker 실행 명령어\n docker mysql 실행\n docker run --name mysql -e MYSQL_ROOT_PASSWORD=mypass -d -p 3306:3306 mysql\n\n\n mysql 컨테이너에 접속하기\n docker exec -it mysql /bin/bash\n\n mysql 데이터베이스에 접근하기\n mysql -u root -p password\n\n\n\n\n Nodejs 서버 + mysql 연결하여  실행 \n docker run -it -p 3060:3060 -p 3065:3065 --volume=$(pwd):/app/  --name web --link mysql-db  -d node  \n\n NodeJs 컨테이너에 접속하기 \n docker exec -it web /bin/bash\n\n mysql 컨테이너 접속 아이피 찾기\n docker inspect bridge\n\n 찾은 아이피를 백엔드 db 설정 파일에 적는다\n /backend/config/config.js\n\n 백엔드와 프런트 서버를 각각 가동한다.\n\n\n\n\n Cube.js 가동하는 방법 on Docker\n 4000, 3050 포트를 호스트와 연결해 준다.\n docker run -it -p 4000:4000 -p 3050:3050 --volume=$(pwd):/app/ --name cubejs --link mysql-db -d node\n \n\n*/","// export const initialState = {\n//     mainPosts: [{\n//         // id: 1,\n//         // User: {\n//         //     id: 1,\n//         //     nickname: \"코드\",\n//         // },\n//         // content: \"첫 번째 게시글\",\n//         // img: \"https://blog.yena.io/assets/post-img/171123-nachoi-300.jpg\",\n//         // Comments: [],\n//     }],                 // 화면에 보일 포스트들\n//     imagePaths: [],     // 미리보기 이미지 경로\n//     addPostErrorReason:'',  // 포스트 업로드 실패 사유\n//     isAddingPost: false,        // 포스트 업로드 중\n//     postAdded: false,           // 포스트 업로드 성공,\n//     isAddingComment:false,\n//     addCommentErrorReason: '',\n//     commentAdded: false,\n// };\n\n// const dummyPost = {\n//     id: 2,\n//     User: {\n//         id: 1,\n//         nickname: '코드',\n//     },\n//     content: '나는 더미입니다',\n//     Comments: [],\n// }\n\n// const dummyComment = {\n//     id: 1,\n//     User: {\n//         id: 1,\n//         nickname: 2,\n//     },\n//     createdAt: new Date(),\n//     content: '더미 댓글입니다',\n// }\n\nexport const initialState = {\n    mainPosts: [], // 화면에 보일 포스트들\n    imagePaths: [], // 미리보기 이미지 경로\n    addPostErrorReason: '', // 포스트 업로드 실패 사유\n    isAddingPost: false, // 포스트 업로드 중\n    postAdded: false, // 포스트 업로드 성공\n    isAddingComment: false,\n    addCommentErrorReason: '',\n    commentAdded: false,\n    singlePost: null,\n  };\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        //case LOAD_COMMENTS_REQUEST:\n        case LOAD_HASHTAG_POSTS_REQUEST:\n        case LOAD_USER_POSTS_REQUEST:\n        case LOAD_MAIN_POSTS_REQUEST: {\n            return {\n                ...state,\n                mainPosts: action.lastId === 0 ? [] : state.mainPosts,\n            };\n        }\n        case LOAD_USER_POSTS_SUCCESS:\n        case LOAD_HASHTAG_POSTS_SUCCESS:\n        case LOAD_MAIN_POSTS_SUCCESS: {\n            return {\n                ...state,     \n                mainPosts: state.mainPosts.concat(action.data),\n            };\n        }\n        //case LOAD_COMMENTS_FAILURE:\n        case LOAD_HASHTAG_POSTS_FAILURE:\n        case LOAD_USER_POSTS_FAILURE:\n        case LOAD_MAIN_POSTS_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case ADD_POST_REQUEST: {\n            //console.log(\" in Reducuer ADD_POST_REQUEST : \", action)\n            return {\n                ...state,\n                isAddingPost: true,\n                addPostErrorReason: '',\n                postAdded: false,\n            };\n        }\n        case ADD_POST_SUCCESS: {\n            //console.log(\" in Reducuer ADD_POST_SUCCESS : \", action)\n            return {\n                ...state,\n                isAddingPost: false,\n                //mainPosts: [dummyPost, ...state.mainPosts],\n                mainPosts: [action.data, ...state.mainPosts],\n                postAdded: true,\n                imagePaths: [],\n            };\n        }\n        case ADD_POST_FAILURE: {\n            return {\n                ...state,\n                isAddingPost: false,\n                addPostErrorReason: action.error,\n            };\n        }\n        case ADD_COMMENT_REQUEST: {\n           // console.log(\" in Reducuer ADD_COMMENT_REQUEST :  \", action)\n            return {\n                ...state,\n                isAddingComment: true,\n                addCommentErrorReason: '',\n                commentAdded: false,\n            };\n        }\n        case ADD_COMMENT_SUCCESS: {\n            // console.log(\" in Reducuer ADD_COMMENT_SUCCESS :  \", action)\n            // console.log(\" chk state : \", state)\n            // console.log(\" state.mainPosts[0] : \", state.mainPosts[0]);\n\n           // try {   \n                const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n                console.log(\"postIndex : \", postIndex);\n                const post = state.mainPosts[postIndex];\n                console.log(\"post : \", post);\n                console.log(\"post.Comments : \", post.Comments)\n                console.log(\"action.data.comment : \", action.data.comment)\n                const Comments = [...post.Comments, action.data.comment];\n                console.log(\"Comments : \", Comments);\n                const mainPosts = [...state.mainPosts];\n                console.log(\"mainPosts : \", mainPosts);\n                mainPosts[postIndex] = {...post, Comments };\n                console.log(\"mainPosts[postIndex] : \", mainPosts[postIndex]);\n            // } catch (e) {\n            //     console.log(\"reducer error : \", e);\n            // }\n            \n            return {\n                ...state,\n                isAddingComment: false,\n                mainPosts,\n                //mainPosts : mainPosts,\n                commentAdded: true,\n            };\n        }\n        case ADD_COMMENT_FAILURE: {\n            console.log(\" in Reducuer ADD_COMMENT_FAILURE :  \", action)\n            return {\n                ...state,\n                isAddingComment: false,\n                addCommentErrorReason: action.error,\n            };\n        }\n        case LOAD_COMMENTS_SUCCESS: {\n\n            console.log('LOAD_COMMENTS_SUCCESS action : ', action.data)\n            console.log('LOAD_COMMENTS_SUCCESS state : ', state)\n\n            if (action.data.postId !== undefined ) {\n                const postIndex = state.mainPosts.findIndex( v=> v.id === action.data.postId);\n                const post = state.mainPosts[postIndex];\n                const Comments = action.data.comments;\n                const mainPosts = [...state.mainPosts];\n                mainPosts[postIndex] = { ...post, Comments};\n\n                return {\n                    ...state,\n                    mainPosts,\n                    //mainPosts : mainPosts,\n                };\n            } else {\n                return {\n                    ...state,\n                }\n            }\n            \n        }\n        case UPLOAD_IMAGES_REQUEST: {\n            return {\n                ...state,\n            };\n        }\n        case UPLOAD_IMAGES_SUCCESS: {\n            return {\n                ...state,\n                imagePaths: [...state.imagePaths, ...action.data],\n            };\n        }\n        case UPLOAD_IMAGES_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case REMOVE_IMAGE: {\n            return {\n                ...state,\n                imagePaths: state.imagePaths.filter((v,i) => i !== action.index),\n            }\n        }\n        case LIKE_POST_REQUEST: {\n            //console.log(\" in Reducuer ADD_POST_REQUEST : \", action)\n            return {\n                ...state,\n            };\n        }\n        case LIKE_POST_SUCCESS: {\n            //console.log(\" in Reducuer ADD_POST_SUCCESS : \", action)\n            const postIndex = state.mainPosts.findIndex( v => v.id === action.data.postId);\n            const post = state.mainPosts[postIndex];\n            const Likers = [{ id: action.data.userId }, ...post.Likers];\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = { ...post, Likers};\n\n            return {\n                ...state,\n                mainPosts,\n            };\n        }\n        case LIKE_POST_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case UNLIKE_POST_REQUEST: {\n            //console.log(\" in Reducuer ADD_POST_REQUEST : \", action)\n            return {\n                ...state,\n            };\n        }\n        case UNLIKE_POST_SUCCESS: {\n            //console.log(\" in Reducuer ADD_POST_SUCCESS : \", action)\n            const postIndex = state.mainPosts.findIndex( v => v.id === action.data.postId);\n            const post = state.mainPosts[postIndex];\n            const Likers = post.Likers.filter(v => v.id !== action.data.userId);\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = { ...post, Likers};\n            return {\n                ...state,\n                mainPosts,\n            };\n        }\n        case UNLIKE_POST_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case RETWEET_REQUEST: {\n            return {\n                ...state,\n            };\n        }\n        case RETWEET_SUCCESS: {\n            console.log('RETWEET_SUCCESS in reducers ', action.data)\n            return {\n                ...state,\n                mainPosts: [action.data, ...state.mainPosts],\n            };\n        }\n        case RETWEET_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        case REMOVE_POST_REQUEST: {\n            return {\n                ...state,\n            };\n        }\n        case REMOVE_POST_SUCCESS: {\n            //console.log('RETWEET_SUCCESS in reducers ', action.data)\n            return {\n                ...state,\n                mainPosts: state.mainPosts.filter( v => v.id !== action.data ),\n            };\n        }\n        case REMOVE_POST_FAILURE: {\n            return {\n                ...state,\n            };\n        }\n        default: {\n            return {\n                ...state,\n            }\n        }\n    }\n};\n\nexport default reducer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAEA;AAAA;AAFA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpvOA;AAyOA;AACA;AACA;;;;A","sourceRoot":""}