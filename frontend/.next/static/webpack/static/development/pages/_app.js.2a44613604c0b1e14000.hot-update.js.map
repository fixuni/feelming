{"version":3,"file":"static/webpack/static/development/pages/_app.js.2a44613604c0b1e14000.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\n    FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE,\n    UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE,\n    LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE,\n    LOAD_FOLLOWINGS_REQUEST, REMOVE_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE,\n    REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE\n} from '../reducers/user'\nimport axios from 'axios';\n// const HELLO_SAGA = 'HELLO_SAGA';\n\n\nfunction logInAPI(logInData) {\n// 서버에 요청 보내는 부분\n    return axios.post('/user/login', logInData, {\n        withCredentials: true,      //  쿠키 교환 with backend \n    });\n}\n\nfunction* logIn(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        //yield delay( 2000);\n        console.log(\"before logInAPI() in Saga\")\n        const result = yield call(logInAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n    // while(true){\n    //     yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n    //     yield put( {            // put 은 redux 에 dispatch 와 동일\n    //         type: LOG_IN_SUCCESS,\n    //     });\n    // }\n}\n\nfunction signUpAPI(signUpData) {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        //yield delay(2000);\n        const result = yield call(signUpAPI, action.data);\n        //throw new Error('에러 발생');\n        console.log(\"result : \", result);\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut(action) {\n    try {\n        yield call(logOutAPI);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_OUT_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n    \n    return axios.get( userId ? `/user/${userId}` : '/user/',  {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser(action) {\n    try {\n        const result = yield call(loadUserAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n    \n    return axios.post( `/user/${userId}/follow`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* follow(action) {\n    try {\n        const result = yield call(followAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: FOLLOW_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: FOLLOW_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchFollow() {\n    yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n    \n    return axios.delete( `/user/${userId}/follow`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* unfollow(action) {\n    try {\n        const result = yield call(unfollowAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: UNFOLLOW_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: UNFOLLOW_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchUnfollow() {\n    yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n    \n    return axios.get( `/user/${userId}/followers`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* loadFollowers(action) {\n    try {\n        const result = yield call(loadFollowersAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_FOLLOWERS_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_FOLLOWERS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadFollowers() {\n    yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId) {\n    \n    return axios.get( `/user/${userId}/followings`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* loadFollowings(action) {\n    try {\n        const result = yield call(loadFollowingsAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOAD_FOLLOWINGS_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOAD_FOLLOWINGS_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadFollowings() {\n    yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n    \n    return axios.delete( `/user/${userId}/follower`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* removeFollower(action) {\n    try {\n        const result = yield call(removeFollowerAPI, action.data);\n        yield put( {            // put 은 dispatch 와 동일\n            type: REMOVE_FOLLOWER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: REMOVE_FOLLOWER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchRemoveFollower() {\n    yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchFollow),\n        fork(watchUnfollow),\n        fork(watchLoadFollowings),\n        fork(watchLoadFollowers),\n        fork(watchRemoveFollower),\n\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }\n\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}"],"mappings":"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","sourceRoot":""}