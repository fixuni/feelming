{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(2000);\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  //console.log('in loadMainPosts Saga ');\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  //console.log('in loadMainPosts Saga ');\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  console.log(\"addCommentAPI() in sagas : \", data);\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"addComment() in sagas : \", action);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"addComment() in sagas result : \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  console.log('loadCommentsAPI()  postId : ', postId);\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  console.log('loadComment action : ', action);\n\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    console.log('loadComments() result.data : ', result.data);\n    console.log('loadComments() action.data : ', action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    //console.log('loadComments FAILURE : ', e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchAddComment), fork(watchloadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["/app/frontend/sagas/post.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","addCommentAPI","console","log","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchloadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","RETWEET_SUCCESS","RETWEET_FAILURE","alert","response","watchRetweet","RETWEET_REQUEST","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay,} from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE,\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n } from '../reducers/post';\nimport axios from 'axios';\n\n\nfunction addPostAPI(postData) {\n    return axios.post('/post', postData, {\n        withCredentials: true,\n    });\n}\n\nfunction* addPost(action) {\n    try{\n        //yield delay(2000);\n        \n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n    //console.log('in loadMainPosts Saga ');\n    return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n    //console.log('in loadMainPosts Saga ');\n    try{\n        const result = yield call(loadMainPostsAPI);\n        yield put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadMainPosts() {\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n    return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n    try{\n        const result = yield call(loadHashtagPostsAPI, action.data);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI() {\n    return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n    try{\n        const result = yield call(loadUserPostsAPI, action.data);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n    console.log(\"addCommentAPI() in sagas : \",data)\n    return axios.post( `/post/${data.postId}/comment`, {content: data.content}, {\n        withCredentials: true,\n    });\n}\n\nfunction* addComment(action) {\n    try{\n        console.log(\"addComment() in sagas : \", action)\n        const result = yield call(addCommentAPI, action.data);\n        console.log(\"addComment() in sagas result : \", result)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: result.data,\n            },\n        });\n    }catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n    console.log('loadCommentsAPI()  postId : ', postId);\n    return axios.get( `/post/${postId}/comments`)\n}\n\nfunction* loadComments(action) {\n    console.log('loadComment action : ', action)\n    try{\n        const result = yield call(loadCommentsAPI, action.data);\n        console.log('loadComments() result.data : ', result.data);\n        console.log('loadComments() action.data : ', action.data);\n\n        yield put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n                postId: action.data,\n                comments: result.data,\n            },\n        });\n    }catch (e) {\n        //console.log('loadComments FAILURE : ', e);\n        yield put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchloadComments() {\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\n\nfunction uploadImagesAPI(formData) {\n    return axios.post( `/post/images`, formData)\n}\n\nfunction* uploadImages(action) {\n    try{\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUploadImages() {\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n    return axios.post( `/post/${postId}/like`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* likePost(action) {\n    try{\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchLikePost() {\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n    return axios.delete( `/post/${postId}/like`, {\n        withCredentials: true,\n    });\n}\n\nfunction* unlikePost(action) {\n    try{\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n                postId: action.data,\n                userId: result.data.userId\n            }\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: e,\n        })\n    }\n}\n\nfunction* watchUnlikePost() {\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n    return axios.post( `/post/${postId}/retweet`, {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* retweet(action) {\n    try{\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    }catch (e) {\n        console.error(e);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: e,\n        });\n        alert(e.response && response.data);\n    }\n}\n\nfunction* watchRetweet() {\n    yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadMainPosts),\n        fork(watchAddPost),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchAddComment),\n        fork(watchloadComments),\n        fork(watchLoadHashtagPosts),\n        fork(watchLoadUserPosts),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchRetweet),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}