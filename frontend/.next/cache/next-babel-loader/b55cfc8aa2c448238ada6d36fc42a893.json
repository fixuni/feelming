{"ast":null,"code":"var _jsxFileName = \"/app/frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from 'react';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    // console.log(window.scrollY, document.documentElement.clientHeight,document.documentElement.scrollHeight);\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        const lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n        }\n\n        countRef.current.push(lastId);\n      }\n    }\n\n    ;\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, me && __jsx(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), mainPosts.map((c, index) => {\n    return __jsx(PostCard, {\n      key: index,\n      post: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home; // function mapStateToProps(state) {\n//     return {\n//         user: state.user,\n//     };\n// }\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         login: () => dispatch(loginAction),\n//         logout: () => dispatch(logoutAction)\n//     };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n/*\n\n // Docker 재실행 방법\n docker ps          // 과거 실행 내역 조사 \n docker restart 이름,\n docker exec -it web(이름) /bin/bash\n npm run dev  // 백엔드 프런트엔드 각각 위치에서 실행 \n\n \n // Docker 초기 실행 방법\n Docker 실행 명령어\n docker mysql 실행\n docker run --name mysql -e MYSQL_ROOT_PASSWORD=mypass -d -p 3306:3306 mysql\n\n\n mysql 컨테이너에 접속하기\n docker exec -it mysql /bin/bash\n\n mysql 데이터베이스에 접근하기\n mysql -u root -p password\n\n\n\n\n Nodejs 서버 + mysql 연결하여  실행 \n docker run -it -p 3060:3060 -p 3065:3065 --volume=$(pwd):/app/  --name web --link mysql-db  -d node  \n\n NodeJs 컨테이너에 접속하기 \n docker exec -it web /bin/bash\n\n mysql 컨테이너 접속 아이피 찾기\n docker inspect bridge\n\n 찾은 아이피를 백엔드 db 설정 파일에 적는다\n /backend/config/config.js\n\n 백엔드와 프런트 서버를 각각 가동한다.\n\n\n\n\n Cube.js 가동하는 방법 on Docker\n 4000, 3050 포트를 호스트와 연결해 준다.\n docker run -it -p 4000:4000 -p 3050:3050 --volume=$(pwd):/app/ --name cubejs --link mysql-db -d node\n \n\n*/","map":{"version":3,"sources":["/app/frontend/pages/index.js"],"names":["React","useEffect","useCallback","useRef","PostCard","PostForm","useDispatch","useSelector","connect","LOAD_MAIN_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePost","post","countRef","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","map","c","index","getInitialProps","context","store"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAkD,aAAlD;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAGA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAASL,WAAW,CAAEM,KAAK,IAAIA,KAAK,CAACC,IAAjB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BT,WAAW,CAAEM,KAAK,IAAIA,KAAK,CAACI,IAAjB,CAA9C;AACA,QAAMC,QAAQ,GAAGf,MAAM,CAAE,EAAF,CAAvB;AAEA,QAAMgB,QAAQ,GAAGjB,WAAW,CAAE,MAAM;AAChC;AACA,QAAIkB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACEF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAD9C,EACoD;AAC5C,UAAIT,WAAJ,EAAiB;AACb,cAAMU,MAAM,GAAGX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAmB,CAApB,CAAT,CAAiCC,EAAhD;;AACA,YAAI,CAACV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAL,EAAwC;AACpCf,UAAAA,QAAQ,CAAC;AACLoB,YAAAA,IAAI,EAAEtB,uBADD;AAELiB,YAAAA;AAFK,WAAD,CAAR;AAIH;;AACDR,QAAAA,QAAQ,CAACW,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACH;AACJ;;AAAA;AACR,GAf2B,EAezB,CAACV,WAAD,EAAcD,SAAS,CAACY,MAAxB,CAfyB,CAA5B;AAiBA1B,EAAAA,SAAS,CAAE,MAAM;AACbmB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,MAAM;AAAG;AACZC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACH,KAFD;AAGH,GALQ,EAKN,CAACJ,SAAS,CAACY,MAAX,CALM,CAAT,CAvBe,CA4BS;;AAExB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,EAEKG,SAAS,CAACoB,GAAV,CAAe,CAACC,CAAD,EAAGC,KAAH,KAAa;AACzB,WACI,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,KAAf;AAAsB,MAAA,IAAI,EAAED,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAJA,CAFL,CADJ;AAUH,CAxCD;;AA0CA1B,IAAI,CAAC4B,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtCA,EAAAA,OAAO,CAACC,KAAR,CAAc7B,QAAd,CAAuB;AACnBoB,IAAAA,IAAI,EAAEtB;AADa,GAAvB;AAGH,CAJD;;AAMA,eAAeC,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","sourcesContent":["import React, { useEffect, useCallback, useRef } from 'react';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector( state => state.user );\n    const { mainPosts, hasMorePost } = useSelector( state => state.post );\n    const countRef = useRef( []);\n\n    const onScroll = useCallback( () => {\n        // console.log(window.scrollY, document.documentElement.clientHeight,document.documentElement.scrollHeight);\n        if (window.scrollY + document.documentElement.clientHeight \n            > document.documentElement.scrollHeight - 300 ) {\n                if (hasMorePost) {\n                    const lastId = mainPosts[mainPosts.length - 1 ].id;\n                    if (!countRef.current.includes(lastId)) {\n                        dispatch({\n                            type: LOAD_MAIN_POSTS_REQUEST,\n                            lastId,\n                        });\n                    }\n                    countRef.current.push(lastId);\n                }\n            };\n    }, [hasMorePost, mainPosts.length]);\n\n    useEffect( () => {\n        window.addEventListener('scroll', onScroll);\n        return () => {  // 이렇게 해야 호출될때 아래가 실행됨, 본 컴포넌트 나갈때 실행됨\n            window.removeEventListener('scroll', onScroll);\n        }\n    }, [mainPosts.length]); //  빈 deps [], 는 처음 로딩될때 한 번만 호출됨\n\n    return (\n        <div>\n            {me && <PostForm /> }\n            {mainPosts.map( (c,index) => {\n                return (\n                    <PostCard key={index} post={c} />\n                );\n            })}\n        </div>\n    );\n};\n\nHome.getInitialProps = async (context) => {\n    context.store.dispatch({\n        type: LOAD_MAIN_POSTS_REQUEST,\n    })\n};\n\nexport default Home;\n\n// function mapStateToProps(state) {\n//     return {\n//         user: state.user,\n//     };\n// }\n\n// function mapDispatchToProps(dispatch) {\n//     return {\n//         login: () => dispatch(loginAction),\n//         logout: () => dispatch(logoutAction)\n//     };\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n/*\n\n // Docker 재실행 방법\n docker ps          // 과거 실행 내역 조사 \n docker restart 이름,\n docker exec -it web(이름) /bin/bash\n npm run dev  // 백엔드 프런트엔드 각각 위치에서 실행 \n\n \n // Docker 초기 실행 방법\n Docker 실행 명령어\n docker mysql 실행\n docker run --name mysql -e MYSQL_ROOT_PASSWORD=mypass -d -p 3306:3306 mysql\n\n\n mysql 컨테이너에 접속하기\n docker exec -it mysql /bin/bash\n\n mysql 데이터베이스에 접근하기\n mysql -u root -p password\n\n\n\n\n Nodejs 서버 + mysql 연결하여  실행 \n docker run -it -p 3060:3060 -p 3065:3065 --volume=$(pwd):/app/  --name web --link mysql-db  -d node  \n\n NodeJs 컨테이너에 접속하기 \n docker exec -it web /bin/bash\n\n mysql 컨테이너 접속 아이피 찾기\n docker inspect bridge\n\n 찾은 아이피를 백엔드 db 설정 파일에 적는다\n /backend/config/config.js\n\n 백엔드와 프런트 서버를 각각 가동한다.\n\n\n\n\n Cube.js 가동하는 방법 on Docker\n 4000, 3050 포트를 호스트와 연결해 준다.\n docker run -it -p 4000:4000 -p 3050:3050 --volume=$(pwd):/app/ --name cubejs --link mysql-db -d node\n \n\n*/"]},"metadata":{},"sourceType":"module"}