{"ast":null,"code":"var _jsxFileName = \"/Users/mac/work/feelming/frontend/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport moment from 'moment';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []); //console.log(\"post.createdAt  : \", post.createdAt)\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice(1)}`,\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, v));\n      }\n\n      return v;\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \" \\uC090\\uC57D \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string //createdAt: PropTypes.string,\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Form","Input","List","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","Link","moment","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","split","map","v","match","tag","slice","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React,{useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\nimport moment from 'moment';\n\n\n\nconst PostCard = ({ post }) => {\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const [commentText, setCommentText ] = useState('');\n    const { me } = useSelector( state => state.user);\n    const { commentAdded, isAddingComment } = useSelector( state => state.post);\n    const dispatch = useDispatch();\n\n    const onToggleComment = useCallback( () => {\n        setCommentFormOpened( prev => !prev );\n        if (!commentFormOpened) {\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [ ]);\n\n    const onSubmitComment = useCallback( (e) => {\n        e.preventDefault();\n        if (!me){\n            return alert('로그인이 필요합니다')\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect( () => {\n        setCommentText('');\n    }, [ commentAdded === true ]);\n\n    const onChangeCommentText = useCallback( (e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    //console.log(\"post.createdAt  : \", post.createdAt)\n    return (\n        <div>\n        <Card\n            key={+post.createdAt}\n            cover={post.img && <img alt=\"example\" src={post.img} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\"/>,\n                <Icon type=\"heart\" key=\"heart\"/>,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Icon type=\"ellipsis\" key=\"ellipsis\"/>,\n            ]}\n            extra={<Button>팔로우</Button>} \n        >\n            <Card.Meta\n          avatar={(\n          <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n          <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n          </Link>\n          )}\n          title={post.User.nickname}\n          description={(\n          <div>\n            {post.content.split(/(#[^\\s]+)/g).map((v) => {\n              if (v.match(/#[^\\s]+/)) {\n                return (\n                  <Link\n                    href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\n                    as={`/hashtag/${v.slice(1)}`}\n                    key={v}\n                  >\n                    <a>{v}</a>\n                  </Link>\n                );\n              }\n              return v;\n            })}\n          </div>\n          )} \n        />\n        </Card>\n        { commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment} >\n                    <Form.Item>\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}> 삐약 </Button>\n                </Form>\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        //createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}