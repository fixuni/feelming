{"ast":null,"code":"var _jsxFileName = \"/app/frontend/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useImperativeHandle } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  console.log(\"post hashtag : \", post.content);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, [me && me.id, post && post.Followings]);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId\n    });\n  }, []); // console.log(\"--------------\")\n  // console.log(\"me : \",me)\n  // console.log(\"post : \",post)\n  //console.log(\"me.followings : \", me.Followings)\n  //console.log(\"post.User.id : \", post.User.id)\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n    ,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \" \\uC218\\uC815 \"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"\\uC2E0\\uACE0\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, __jsx(Icon, {\n      type: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗했습니다` : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(v => v.id === post.User.id) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id),\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \" \\uC090\\uC57D \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string //createdAt: PropTypes.string,\n\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/app/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","useImperativeHandle","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","PropTypes","useSelector","useDispatch","Link","PostImages","PostCardContent","UNFOLLOW_USER_REQUEST","FOLLOW_USER_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","PostCard","post","console","log","content","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","Followings","onUnfollow","onRemovePost","createdAt","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,mBAAhD,QAA2E,OAA3E;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkDC,IAAlD,EAAwDC,OAAxD,EAAiEC,OAAjE,QAA+E,MAA/E;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,kBAA3D;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,EAAqDC,mBAArD,EAA0EC,iBAA1E,EAA6FC,eAA7F,EAA8GC,mBAA9G,EAAmIC,mBAAnI,QAA8J,kBAA9J;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAAI,CAACG,OAApC;AACA,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAA6ClC,QAAQ,CAAC,KAAD,CAA3D;AACA,QAAM;AAAA,OAACmC,WAAD;AAAA,OAAcC;AAAd,MAAiCpC,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM;AAAEqC,IAAAA;AAAF,MAASvB,WAAW,CAAEwB,KAAK,IAAIA,KAAK,CAACC,IAAjB,CAA1B;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoC3B,WAAW,CAAEwB,KAAK,IAAIA,KAAK,CAACT,IAAjB,CAArD;AACA,QAAMa,QAAQ,GAAG3B,WAAW,EAA5B;AAEA,QAAM4B,KAAK,GAAGN,EAAE,IAAIR,IAAI,CAACe,MAAX,IAAqBf,IAAI,CAACe,MAAL,CAAYC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASV,EAAE,CAACU,EAAlC,CAAnC;AAEA,QAAMC,eAAe,GAAG/C,WAAW,CAAE,MAAM;AACvCiC,IAAAA,oBAAoB,CAAEe,IAAI,IAAI,CAACA,IAAX,CAApB;;AACA,QAAI,CAAChB,iBAAL,EAAwB;AACpBS,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAE5B,qBADD;AAEL6B,QAAAA,IAAI,EAAEtB,IAAI,CAACkB;AAFN,OAAD,CAAR;AAIH;AACJ,GARkC,EAQhC,EARgC,CAAnC;AAUA,QAAMK,eAAe,GAAGnD,WAAW,CAAGoD,CAAD,IAAO;AACxCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACjB,EAAL,EAAQ;AACJ,aAAOkB,KAAK,CAAC,YAAD,CAAZ;AACH;;AACD,WAAOb,QAAQ,CAAC;AACZQ,MAAAA,IAAI,EAAE7B,mBADM;AAEZ8B,MAAAA,IAAI,EAAE;AACFK,QAAAA,MAAM,EAAE3B,IAAI,CAACkB,EADX;AAEFf,QAAAA,OAAO,EAAEG;AAFP;AAFM,KAAD,CAAf;AAOH,GAZkC,EAYhC,CAACE,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAcZ,WAAd,CAZgC,CAAnC;AAcAjC,EAAAA,SAAS,CAAE,MAAM;AACbkC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAAEI,YAAY,KAAK,IAAnB,CAFM,CAAT;AAIA,QAAMiB,mBAAmB,GAAGxD,WAAW,CAAGoD,CAAD,IAAO;AAC5CjB,IAAAA,cAAc,CAACiB,CAAC,CAACK,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,QAAMC,YAAY,GAAG3D,WAAW,CAAE,MAAM;AACpC,QAAI,CAACoC,EAAL,EAAS;AACL,aAAOkB,KAAK,CAAC,YAAD,CAAZ;AACH;;AACD,QAAIZ,KAAJ,EAAU;AAAM;AACZD,MAAAA,QAAQ,CAAE;AACNQ,QAAAA,IAAI,EAAE3B,mBADA;AAEN4B,QAAAA,IAAI,EAAEtB,IAAI,CAACkB;AAFL,OAAF,CAAR;AAIH,KALD,MAKO;AAAyD;AAC5DL,MAAAA,QAAQ,CAAE;AACNQ,QAAAA,IAAI,EAAE1B,iBADA;AAEN2B,QAAAA,IAAI,EAAEtB,IAAI,CAACkB;AAFL,OAAF,CAAR;AAIH;AACJ,GAf+B,EAe7B,CAACV,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAclB,IAAI,IAAIA,IAAI,CAACkB,EAA3B,EAA+BJ,KAA/B,CAf6B,CAAhC;AAiBA,QAAMkB,SAAS,GAAG5D,WAAW,CAAE,MAAM;AACjC,QAAI,CAACoC,EAAL,EAAS;AACL,aAAOkB,KAAK,CAAC,YAAD,CAAZ;AACH;;AACD,WAAOb,QAAQ,CAAC;AACZQ,MAAAA,IAAI,EAAEzB,eADM;AAEZ0B,MAAAA,IAAI,EAAEtB,IAAI,CAACkB;AAFC,KAAD,CAAf;AAIH,GAR4B,EAQ1B,CAACV,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAclB,IAAI,IAAIA,IAAI,CAACkB,EAA3B,CAR0B,CAA7B;AAUA,QAAMe,QAAQ,GAAG7D,WAAW,CAAE8D,MAAM,IAAI,MAAM;AAC1CrB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAE9B,mBADD;AAEL+B,MAAAA,IAAI,EAAEY;AAFD,KAAD,CAAR;AAIH,GAL2B,EAKzB,CAAC1B,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAclB,IAAI,IAAIA,IAAI,CAACmC,UAA3B,CALyB,CAA5B;AAOA,QAAMC,UAAU,GAAGhE,WAAW,CAAE8D,MAAM,IAAI,MAAM;AAC5CrB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAE/B,qBADD;AAELgC,MAAAA,IAAI,EAAEY;AAFD,KAAD,CAAR;AAIH,GAL6B,EAK3B,EAL2B,CAA9B;AAOA,QAAMG,YAAY,GAAGjE,WAAW,CAAE8D,MAAM,IAAI,MAAM;AAC9CrB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEvB,mBADD;AAELwB,MAAAA,IAAI,EAAEY;AAFD,KAAD,CAAR;AAIH,GAL+B,EAK9B,EAL8B,CAAhC,CAnF2B,CA0F3B;AACA;AACA;AACA;AACA;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AACI,IAAA,GAAG,EAAE,CAAClC,IAAI,CAACsC,SADf,CAEI;AAFJ;AAGI,IAAA,KAAK,EAAEtC,IAAI,CAACuC,MAAL,IAAevC,IAAI,CAACuC,MAAL,CAAY,CAAZ,CAAf,IAAiC,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEvC,IAAI,CAACuC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH5C;AAII,IAAA,OAAO,EAAE,CACL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEP,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAEL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,GAAG,EAAC,OAAvB;AAA+B,MAAA,KAAK,EAAElB,KAAK,GAAG,SAAH,GAAe,UAA1D;AAAsE,MAAA,YAAY,EAAE,SAApF;AAA+F,MAAA,OAAO,EAAEiB,YAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,EAGL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEZ,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,MAAC,OAAD;AACI,MAAA,GAAG,EAAC,UADR;AAEI,MAAA,OAAO,EACH,MAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKX,EAAE,IAAIR,IAAI,CAACwC,MAAL,KAAgBhC,EAAE,CAACU,EAAzB,GAEO,4BACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEmB,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CAFP,GAOC,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARN,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAeQ,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfR,CAJK,CAJb;AA0BI,IAAA,KAAK,EAAErC,IAAI,CAACyC,SAAL,GAAkB,GAAEzC,IAAI,CAAC0C,IAAL,CAAUC,QAAS,YAAvC,GAAqD,IA1BhE;AA4BI,IAAA,KAAK,EAAE,CAACnC,EAAD,IAAOR,IAAI,CAAC0C,IAAL,CAAUxB,EAAV,KAAiBV,EAAE,CAACU,EAA3B,GACD,IADC,GAEDV,EAAE,CAAC2B,UAAH,IAAiB3B,EAAE,CAAC2B,UAAH,CAAcnB,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASlB,IAAI,CAAC0C,IAAL,CAAUxB,EAA3C,CAAjB,GACE,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAEkB,UAAU,CAACpC,IAAI,CAAC0C,IAAL,CAAUxB,EAAX,CAA3B;AAA2C,MAAA,IAAI,EAAC,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,GAEE,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAEe,QAAQ,CAACjC,IAAI,CAAC0C,IAAL,CAAUxB,EAAX,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAhCZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmCKlB,IAAI,CAACyC,SAAL,IAAkBzC,IAAI,CAAC4C,OAAvB,GAEG,MAAC,IAAD;AACI,IAAA,KAAK,EAAE5C,IAAI,CAAC4C,OAAL,CAAaL,MAAb,CAAoB,CAApB,KAA0B,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEvC,IAAI,CAAC4C,OAAL,CAAaL,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGA,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EACN,MAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAEM,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,KAAK,EAAE;AAAE5B,UAAAA,EAAE,EAAElB,IAAI,CAAC0C,IAAL,CAAUxB;AAAhB;AAA5B,OAAZ;AAAgE,MAAA,EAAE,EAAG,SAAQlB,IAAI,CAAC0C,IAAL,CAAUxB,EAAG,EAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASlB,IAAI,CAAC0C,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAH,CADA,CAFJ;AAMA,IAAA,KAAK,EAAE3C,IAAI,CAAC0C,IAAL,CAAUC,QANjB;AAOA,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAE3C,IAAI,CAAC4C,OAAL,CAAazC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CAFH,GAiBD,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EACN,MAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAE0C,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,KAAK,EAAE;AAAE5B,UAAAA,EAAE,EAAElB,IAAI,CAAC0C,IAAL,CAAUxB;AAAhB;AAA5B,OAAZ;AAAgE,MAAA,EAAE,EAAG,SAAQlB,IAAI,CAAC0C,IAAL,CAAUxB,EAAG,EAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASlB,IAAI,CAAC0C,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAH,CADA,CAFJ;AAMF,IAAA,KAAK,EAAE3C,IAAI,CAAC0C,IAAL,CAAUC,QANf;AAOF,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,QAAQ,EAAE3C,IAAI,CAACG,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApDJ,CADA,EAgEEC,iBAAiB,IACf,4BACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEmB,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEjB,WAAhC;AAA6C,IAAA,QAAQ,EAAEsB,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEhB,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,CADJ,EAOI,MAAC,IAAD;AACI,IAAA,MAAM,EAAG,GAAEZ,IAAI,CAAC+C,QAAL,GAAgB/C,IAAI,CAAC+C,QAAL,CAAcC,MAA9B,GAAuC,CAAE,KADxD;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAEhD,IAAI,CAAC+C,QAAL,IAAiB,EAHjC;AAII,IAAA,UAAU,EAAEE,IAAI,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,OAAD;AACI,MAAA,MAAM,EAAEA,IAAI,CAACP,IAAL,CAAUC,QADtB;AAEI,MAAA,MAAM,EACF,MAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AAAEE,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,KAAK,EAAE;AAAE5B,YAAAA,EAAE,EAAE+B,IAAI,CAACP,IAAL,CAAUxB;AAAhB;AAA5B,SAAZ;AAAgE,QAAA,EAAE,EAAG,SAAQ+B,IAAI,CAACP,IAAL,CAAUxB,EAAG,EAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS+B,IAAI,CAACP,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAH,CADA,CAHR;AAOI,MAAA,OAAO,EAAEM,IAAI,CAAC9C,OAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAjEJ,CADJ;AAsGH,CAtMD;;AAwMAJ,QAAQ,CAACmD,SAAT,GAAqB;AACjBlD,EAAAA,IAAI,EAAEhB,SAAS,CAACmE,KAAV,CAAgB;AAClBT,IAAAA,IAAI,EAAE1D,SAAS,CAACoE,MADE;AAElBjD,IAAAA,OAAO,EAAEnB,SAAS,CAACqE,MAFD;AAGlBC,IAAAA,GAAG,EAAEtE,SAAS,CAACqE,MAHG,CAIlB;;AAJkB,GAAhB;AADW,CAArB;AASA,eAAetD,QAAf","sourcesContent":["import React,{useState, useCallback, useEffect, useImperativeHandle } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover} from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport PostImages from './PostImages'\nimport PostCardContent from './PostCardContent';\nimport { UNFOLLOW_USER_REQUEST, FOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\n\n\nconst PostCard = ({ post }) => {\n    console.log(\"post hashtag : \", post.content)\n    const [commentFormOpened, setCommentFormOpened ] = useState(false);\n    const [commentText, setCommentText ] = useState('');\n    const { me } = useSelector( state => state.user);\n    const { commentAdded, isAddingComment } = useSelector( state => state.post);\n    const dispatch = useDispatch();\n\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n    const onToggleComment = useCallback( () => {\n        setCommentFormOpened( prev => !prev );\n        if (!commentFormOpened) {\n            dispatch({\n                type: LOAD_COMMENTS_REQUEST,\n                data: post.id,\n            })\n        }\n    }, [ ]);\n\n    const onSubmitComment = useCallback( (e) => {\n        e.preventDefault();\n        if (!me){\n            return alert('로그인이 필요합니다')\n        }\n        return dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                postId: post.id,\n                content: commentText,\n            },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect( () => {\n        setCommentText('');\n    }, [ commentAdded === true ]);\n\n    const onChangeCommentText = useCallback( (e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    const onToggleLike = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        if (liked){     // 좋아요 누른 상태\n            dispatch( {\n                type: UNLIKE_POST_REQUEST,\n                data: post.id,\n            });\n        } else {                                                        // 좋아요 안 누른 상태\n            dispatch( {\n                type: LIKE_POST_REQUEST,\n                data: post.id,\n            });\n        }\n    }, [me && me.id, post && post.id, liked])\n\n    const onRetweet = useCallback( () => {\n        if (!me) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        });\n    }, [me && me.id, post && post.id]);\n\n    const onFollow = useCallback( userId => () => {\n        dispatch({\n            type: FOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, [me && me.id, post && post.Followings]);\n\n    const onUnfollow = useCallback( userId => () => {\n        dispatch({\n            type: UNFOLLOW_USER_REQUEST,\n            data: userId,\n        });\n    }, []);\n\n    const onRemovePost = useCallback( userId => () => {\n        dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: userId,\n        });\n    },[]);\n\n    // console.log(\"--------------\")\n    // console.log(\"me : \",me)\n    // console.log(\"post : \",post)\n    //console.log(\"me.followings : \", me.Followings)\n    //console.log(\"post.User.id : \", post.User.id)\n\n    return (\n        <div>\n        <Card\n            key={+post.createdAt}\n            //cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3065/${post.Images[0].src}`} />}\n            cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n            actions={[\n                <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n                <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor={\"#eb2f96\"} onClick={onToggleLike} />,\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\n                <Popover\n                    key='ellipsis'\n                    content={(\n                        <Button.Group>\n                            {me && post.UserId === me.id\n                                ? (\n                                    <>\n                                        <Button> 수정 </Button>\n                                        <Button type=\"danger\" onClick={onRemovePost} >삭제</Button>\n                                    </>\n                                )\n                            : <Button>신고</Button>}\n                        </Button.Group>\n                    )}\n                    >\n                        <Icon type=\"ellipsis\" />\n                    </Popover>\n            ]}\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗했습니다` : null}\n    \n            extra={!me || post.User.id === me.id\n                ? null\n                : me.Followings && me.Followings.find(v => v.id === post.User.id)\n                  ? <Button onClick={onUnfollow(post.User.id)} type='primary'>언팔로우</Button>\n                  : <Button onClick={onFollow(post.User.id)} >팔로우</Button>\n              }\n        >\n            {post.RetweetId && post.Retweet ?\n                (\n                <Card\n                    cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\n                >\n                <Card.Meta\n                    avatar={(\n                    <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                    </Link>\n                    )}\n                title={post.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />}\n                />\n                </Card>\n                )\n            : (\n            <Card.Meta\n                avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id }}}  as={`/user/${post.User.id}`}>\n                <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n          )}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n\n            /> )}\n        </Card>\n        { commentFormOpened && (\n            <>\n                <Form onSubmit={onSubmitComment} >\n                    <Form.Item>\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}> 삐약 </Button>\n                </Form>\n                <List\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n                    itemLayout=\"horizontal\"\n                    dataSource={post.Comments || []}\n                    renderItem={item => (\n                        <li>\n                            <Comment\n                                author={item.User.nickname}\n                                avatar={(\n                                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                content={item.content}\n                            />\n                            {/* <Comment\n                                author={item.User.nickname}\n                                // 아래 링크는 SPA 처리 안되는 방식임\n                                avatar={<Link href={`/user/${item.User.id}`} ><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n                                content={item.content}\n                                //datatime={item.createdAt}\n                            /> */}\n                        </li>\n                    )}\n                />\n            </>\n        )}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        User: PropTypes.object,\n        content: PropTypes.string,\n        img: PropTypes.string,\n        //createdAt: PropTypes.string,\n    })\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}