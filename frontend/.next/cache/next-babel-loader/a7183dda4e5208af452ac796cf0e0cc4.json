{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Form, Input } from 'antd';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({\n  post\n}) => {\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["/app/frontend/containers/CommentForm.js"],"names":["React","useCallback","useEffect","useState","useSelector","useDispatch","Button","Form","Input","ADD_COMMENT_REQUEST","CommentForm","post","commentText","setCommentText","commentAdded","isAddingComment","state","me","user","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEW,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACL,IAAhB,CAArD;AACA,QAAM;AAAEM,IAAAA;AAAF,MAASb,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACE,IAAhB,CAA1B;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,eAAe,GAAGnB,WAAW,CAAEoB,CAAD,IAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACL,EAAL,EAAS;AACT,aAAOM,KAAK,CAAC,aAAD,CAAZ;AACC;;AACD,WAAOJ,QAAQ,CAAC;AAChBK,MAAAA,IAAI,EAAEf,mBADU;AAEhBgB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EADX;AAEFC,QAAAA,OAAO,EAAEhB;AAFP;AAFU,KAAD,CAAf;AAOH,GAZkC,EAYhC,CAACK,EAAE,IAAIA,EAAE,CAACU,EAAV,EAAcf,WAAd,CAZgC,CAAnC;AAcAV,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAACC,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,QAAMe,mBAAmB,GAAG5B,WAAW,CAAEoB,CAAD,IAAO;AAC3CR,IAAAA,cAAc,CAACQ,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEX;AAAhB,KACA,MAAC,IAAD,CAAM,IAAN,QACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAER,WAAhC;AAA6C,IAAA,QAAQ,EAAEiB;AAAvD,IADJ,CADA,EAIA,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEd;AAAlD,oBAJA,CADJ;AAQH,CApCD;;AA0CA,eAAeL,WAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Input } from 'antd';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({ post }) => {\n    const [commentText, setCommentText] = useState('');\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\n    const { me } = useSelector(state => state.user);\n    const dispatch = useDispatch();\n\n    const onSubmitComment = useCallback((e) => {\n        e.preventDefault();\n        if (!me) {\n        return alert('로그인이 필요합니다.');\n        }\n        return dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n            postId: post.id,\n            content: commentText,\n        },\n        });\n    }, [me && me.id, commentText]);\n\n    useEffect(() => {\n        setCommentText('');\n    }, [commentAdded === true]);\n\n    const onChangeCommentText = useCallback((e) => {\n        setCommentText(e.target.value);\n    }, []);\n\n    return (\n        <Form onSubmit={onSubmitComment}>\n        <Form.Item>\n            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n        </Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n        </Form>\n    );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}